_parboiled_ provides a recursive descent "PEG":http://en.wikipedia.org/wiki/Parsing_expression_grammar parser
implementation that operates on "PEG":http://en.wikipedia.org/wiki/Parsing_expression_grammar rules you specify.
Your grammar specification can include parser actions, which perform arbitrary logic at any given point during the
parsing process, for example in order to augment input recognition with custom conditions or to construct an
"Abstract Syntax Tree":http://en.wikipedia.org/wiki/Abstract_syntax_tree (AST).

h3. Two Phases

Your code interacts with _parboiled_ in two phases. In the first phase, the "rule construction" phase, _parboiled_ builds
a tree (or rather a directed graph) of parser rules in the way your Java or Scala DSL code specifies. This phase is
independent from actual input and only has to be performed once during the lifetime of an JVM instance (i.e. the built
rule tree is reusable).
The second phase is the actual parsing phase in which your rules are run against a specific input text (the
"rule execution" phase). The end result of that phase is the following information:
* Boolean flag determining whether the input matched or did not match the root rule
* List of potentially encountered parse errors
* One or more value object(s) constructed by your parser actions

h3. Rules

Rule construction happens by executing the rule construction code of your Java or Scala code. _parboiled_ provides two
separate DSLs (one for Java, one for Scala) that try to make rule definition as "comfortable" as possible under the
constraints of the respective source language.
In Java you derive a custom class from "BaseParser":http://sirthias.github.com/parboiled/api/org/parboiled/BaseParser.html,
the required base class of all _parboiled for Java_ parsers, and define methods returning
"Rule":http://sirthias.github.com/parboiled/api/org/parboiled/Rule.html instances. These methods construct a rule
instance from other rules, terminals, predefined primitives and action expressions.
Because the Java syntax is somewhat restrictive _parboiled_ employs a process called "Parser extension" (see [[Parser extension in Detail]])
to support more concise rule construction code than otherwise possible.
Because Scala is much more expressive by itself _parboiled for Scala_ does not need a separate parser extension step.
In Scala your parser rule "tree" is being built directly from the _parboiled for Scala_ language elements.

h3. Parser Actions

In order for your parser to be more than just a "recognizer" (i.e. a piece of code determining whether a given input text
conforms to the language defined by your grammar) your parser needs to include parser actions.
Parser actions are snippets of custom code that are executed at specific points during rule execution. Apart from
inspecting the parser state (e.g. by looking at matched input text segments) Parser actions typically construct parser
"values" (e.g. AST nodes) and can actively influence the parsing process as semantic predicates.

h3. The Value Stack

During the rule execution phase your parser actions can make use of the "Value Stack" for organizing the construction
of custom object like AST nodes. The Value Stack is a simple stack construct that serves as temporary storage for custom
objects. The way you use the Value Stack depends on whether you are using _parboiled for Java_ or _parboiled for Scala_.

h3. The Parse Tree

During the rule execution phase _parboiled_ can optionally construct a _parse tree_, whose nodes correspond to the
recognized rules. Each parse tree "Node":http://sirthias.github.com/parboiled/api/org/parboiled/Node.html contains a
reference to the "Matcher":http://sirthias.github.com/parboiled/api/org/parboiled/matchers/Matcher.html of the rule it
was constructed from, the matched input text (position) as well as the current element at the top of the Value Stack.
The parse tree can be viewed as the record of what rules have matched a given input and is particularly useful during
debugging.

h3. The ParseRunner

The "ParseRunner":http://sirthias.github.com/parboiled/api/org/parboiled/ParseRunner.html is responsible for "supervising"
a parsing run and optionally apply additional logic, most importantly the handling of illegal input characters
(according to the grammar), aka parse errors.
When you perform a parsing run with _parboiled_ you can choose from these 5 predefined ParseRunners:
* "BasicParseRunner":http://sirthias.github.com/parboiled/api/org/parboiled/BasicParseRunner.html, the fastest and most basic ParseRunner, performs no error handling
* "RecordingParseRunner":http://sirthias.github.com/parboiled/api/org/parboiled/RecordingParseRunner.html, records the input location of the first parse error
* "ReportingParseRunner":http://sirthias.github.com/parboiled/api/org/parboiled/ReportingParseRunner.html, creates a proper "InvalidInputError":http://sirthias.github.com/parboiled/api/org/parboiled/errors/InvalidInputError.html object for the first parse error in the input
* "RecoveringParseRunner":http://sirthias.github.com/parboiled/api/org/parboiled/RecoveringParseRunner.html, the most complex ParseRunner, reports all parse errors in the input and tries to intelligently recover from them (see [[Parse Error Handling]])
* "ProfilingParseRunner":http://sirthias.github.com/parboiled/api/org/parboiled/ProfilingParseRunner.html, a special ParseRunner producing detailed statistics about how your parser digested one or more inputs

<!-- please do not remove the GA tracking snippet below -->
<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try { var pageTracker = _gat._getTracker("UA-11564948-1"); pageTracker._trackPageview();} catch(err) {}</script>