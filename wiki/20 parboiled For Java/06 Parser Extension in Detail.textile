When you call "Parboiled.createParser":http://sirthias.github.com/parboiled/javadoc/org/parboiled/Parboiled.html#createParser(java.lang.Class,%20java.lang.Object...)
to construct an instance of your parser class for the first time _parboiled for Java_ internally runs its parser
extension logic to augment you parser class with all kinds of special functionality.
In order to do that _parboiled_ creates a new, artifical subclass of your parser class that lives in the same package
and has the name of your parser class suffixed with "$$parboiled".
Because of this basic approach your parser class must not be private or final, since otherwise _parboiled_ would not be
able to subclass it.

The automatically created parser subclass contains method overrides for all methods returning
"Rule":http://sirthias.github.com/parboiled/javadoc/org/parboiled/Rule.html instances. These overrides might at some point
delegate to their super methods (the original rule method you defined in your parser class) or they might completely
rewrite their supers method body without actually calling it.

These rule methods extensions require a complete rewrite of the method body and therefore do not call their super method:
* [[Parser Action Expressions]]
* [[Action Variables]]

These rule method extensions can be applied without a method rewrite and call the super method if the method does not
also require a transformation listed above:
* "@Label":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/Label.html
* "@Cached":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/Cached.html
* "@SuppressNode":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/SuppressNode.html
* "@SuppressSubnodes":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/SuppressSubnodes.html
* "@SkipNode":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/SkipNode.html

Normally you don't have to care about the question whether an extension requires a method rewrite or not. However, in
debugging scenarios, where you want to set a breakpoint in a rule method in order to trace its execution, your breakpoint
will not be hit if the rule method has been rewritten by _parboileds_ parser extension logic. So, for example, if you
want to debug a rule method containing explicit or implicit action expressions you will have to temporarily convert these
action expressions to explicit anonymous inner "Action":http://sirthias.github.com/parboiled/javadoc/org/parboiled/Action.html
classes in order to prevent _parboiled_ from completely rewriting the rule method.

All parser methods not returning "Rule":http://sirthias.github.com/parboiled/javadoc/org/parboiled/Rule.html objects are left
untouched by _parboileds_ parser extension logic. In smaller parsers these often implement simple parser actions and can
be directly used in rule methods, as long as they are not private.


<!-- please do not remove the GA tracking snippet below -->
<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try { var pageTracker = _gat._getTracker("UA-11564948-1"); pageTracker._trackPageview();} catch(err) {}</script>