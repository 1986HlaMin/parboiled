_parboiled_ can optionally build a parse tree during the rule execution phase. Looking at the parse tree can give you a better understanding of how your parser digested a given input and is therefore especially helpful during parser development and debugging.

The parse tree created by _parboiled_ consists of immutable object instances satisfying the "Node":http://sirthias.github.com/parboiled/javadoc/org/parboiled/Node.html interface. Apart from basic tree node functionality (parent, children) this interface defines a node name (the label), start/end locations for matched input text and a custom value object. There are a few utility classes defining static convenience methods for efficiently working with parse trees (and trees/graphs in general), namely "ParseTreeUtils":http://sirthias.github.com/parboiled/javadoc/org/parboiled/support/ParseTreeUtils.html, "TreeUtils":http://sirthias.github.com/parboiled/javadoc/org/parboiled/trees/TreeUtils.html and "GraphUtils":http://sirthias.github.com/parboiled/javadoc/org/parboiled/trees/GraphUtils.html.

One important thing to keep in mind is that parse tree nodes are *immutable*, i.e. once they have been constructed there is no way to change anything about them. In particular this means that their subnode structure and their value object reference cannot be altered. (Even though their value object, should it be mutable, might still accept changes.) One consequence is that the whole parse tree is built bottom up, starting with the leaf nodes. In general, if parse tree building is enabled, each rule that successfully matched creates a parse tree node that has the nodes created by the successfully matched subrules as children. A rule that did not match creates no parse tree node. In that regard the parse tree can be thought of as "the record of matched rules". _parboiled_ sets the value field of a parse tree node to the top element of the value stack at the time of the node construction. So looking at the parse tree value objects can give you a clue of how your parser works with the value stack.
Maybe the most useful thing to do with a parse tree is to print it using the static "printNodeTree":http://sirthias.github.com/parboiled/javadoc/org/parboiled/support/ParseTreeUtils.html#printNodeTree(org.parboiled.support.ParsingResult) method of the "ParseTreeUtils":http://sirthias.github.com/parboiled/javadoc/org/parboiled/support/ParseTreeUtils.html class.

h3. Enabling Parse Tree Building in Java

You enable parse tree building by decorating your parser class with a "@BuildParseTree":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/BuildParseTree.html annotation. You can then fine-tune parse tree and -branch creation by using the "@SuppressNode":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/SuppressNode.html, "@SuppressSubnodes":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/SuppressSubnodes.html and "@SkipNode":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/SkipNode.html annotations on your rule methods.

h3. Enabling Parse Tree Building in Scala

_parboiled for Scalas_ "Parser":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Parser.html trait has a boolean flag called "buildParseTree" that needs to be set to _true_ before the root rule is being built in order to enable parse tree building. The easiest way to do this is to append ".withParseTreeBuilding()" to the constructor call of your _parboiled for Scala_ parser. Similar to _parboiled for Java_ you can then fine-tune the parse tree creation by passing one of the defined case objects derived from "Parser#RuleOption":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Parser$RuleOption.html to the "rule" call of your rule creation method.


<!-- please do not remove the GA tracking snippet below -->
<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try { var pageTracker = _gat._getTracker("UA-11564948-1"); pageTracker._trackPageview();} catch(err) {}</script>