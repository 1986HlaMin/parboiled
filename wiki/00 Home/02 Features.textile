These are the main features _parboiled_ offers:

# *Grammar definition directly in Java or Scala source*
** No external, custom format non-Java/non-Scala files
** No proprietary syntax to learn
** No break in IDE support (syntax highlighting, code navigation, refactoring, etc.)
# *Real-world ready*
** Full expressive power of "Parsing Expression Grammars":http://en.wikipedia.org/wiki/Parsing_expression_grammar
** Support for powerful and flexible parser actions
** Excellent parse error reporting and recovery
** Good performance
# *Very easy integration*
** One library, one JAR, no dependencies
** No external parser generator tools to manage
** No special steps complicating your build process
** No "untouchable", generated source files in your project structure
** Open and flexible architecture to integrate easily into existing structures
# *Light-weight, easy-to-use*
** Just one parsing phase (no lexer code required)
** Small, simple API
** Library is ca. 300 Kb with no further dependencies

Even though _parboiled_ was originally designed less for speed than for ease-of-use and manageability its parsing performance has improved significantly since its early releases and is now more than sufficient for most applications. It can parse its own Java 5 sources (see the [[Java Parser]] example) at a rate of approx. 50,000 lines or 1.8 million characters per second on one core of a 2.4 GHz Intel Core i5 (under OS/X Java 6).


<!-- please do not remove the GA tracking snippet below -->
<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try { var pageTracker = _gat._getTracker("UA-11564948-1"); pageTracker._trackPageview();} catch(err) {}</script>