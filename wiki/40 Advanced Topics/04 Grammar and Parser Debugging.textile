Debugging a _parboiled_ parser is not very hard since for most things you can directly rely on the debugging capabilities of your Java IDE. The first thing you should do, if you are not sure why your parser matches a certain input in a certain way, is to switch on parse tree building (see [[The Parse Tree]]) and print the parse tree with "printNodeTree":http://sirthias.github.com/parboiled/javadoc/org/parboiled/support/ParseTreeUtils.html#printNodeTree(org.parboiled.support.ParsingResult). If your tree is too verbose to be easily readable you can switch off uninteresting branches with "@SuppressNode":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/SuppressNode.html and/or "@SuppressSubnodes":http://sirthias.github.com/parboiled/javadoc/org/parboiled/annotations/SuppressSubnodes.html annotations (or the respective RuleOption case object in your Scala parser).
Additionally or alternatively you can use the "printNodeTree overload taking a Filter":http://sirthias.github.com/parboiled/javadoc/org/parboiled/support/ParseTreeUtils.html#printNodeTree(org.parboiled.support.ParsingResult,%20org.parboiled.trees.Filter) to only print selected node levels.

If looking at the parse tree does not help you can also trace the parsing process by inserting debugging breakpoints at the right points in your grammar and trace the matching process manually. _parboiled_ tries to let you leverage your IDE as much as possible, so the best way to debug your _parboiled_ parser is probably to use the integrated debugger of your IDE. However, since parser rule methods often times consist of only one large return statement simply setting a breakpoint at this statement is usually not very helpful. Also, your rule method is executed during rule construction and not during rule execution, so even you could somehow set a breakpoint "somewhere inside" the rule expression it would not be hit during the running phase of your parser.

Additionally, in many cases _parboiled for Java_ has to rewrite your rule methods in order to inject the proper code for action expression wrapping and so on, which means that your "original" rule method is actually never run and any breakpoint set in it is never hit. The easiest way to work around this problem is to call another simple (action) method and set a breakpoint there.

Consider this example:

bc. Rule SomeRule() {
    Var<Integer> i = new Var<Integer>();
    return Sequence(
        OneOrMore(Digit()),
        i.set(Integer.parseInt(match())),
        SomeOtherRule(i)
    );
}

This method contains an action expression, which means that _parboiled_ has to rewrite the method during parser extension and any breakpoints in it will not be hit. In order to still stop program execution when the method is run (i.e. during rule construction) simply create a debugging method and set a breakpoint there:

bc.. Rule SomeRule() {
    Var<Integer> i = new Var<Integer>();
    debug();
    return Sequence(
        OneOrMore(Digit()),
        i.set(Integer.parseInt(match())),
        SomeOtherRule(i)
    );
}

void debug() {
    System.out.println("BREAK"); // set breakpoint here
}

p. If you want to trace the rule execution during the runtime of the parser rather than during rule construction simply create debugging actions:

bc.. Rule SomeRule() {
    Var<Integer> i = new Var<Integer>();
    return Sequence(
        OneOrMore(Digit()),
        debug(prevText()),
        i.set(Integer.parseInt(match())),
        debug(i),
        SomeOtherRule(i)
    );
}

boolean debug(String s) {
    System.out.println(s); // set breakpoint here if required
    return true;
}

boolean debug(Var<Integer> i) {
    System.out.println(i.get()); // set breakpoint here if required
    return true;
}

p. You can pass the values that you would like to inspect directly to your debugging method.

One simple trick to ease parser debugging during grammar development is to keep a small debug method around in the parser with a permanently set breakpoint in it. This way you can always simply drop an action call to this method anywhere in your grammar and the next debugging run will properly stop at the right point during parser runtime. If you make your debug method take a "Context":http://sirthias.github.com/parboiled/javadoc/org/parboiled/Context.html parameter and call it with debug(getContext()) you have immediate access to the current parsing context right from the breakpoint:

bc. boolean debug(Context context) {
    return true; // set permanent breakpoint here
}


<!-- please do not remove the GA tracking snippet below -->
<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try { var pageTracker = _gat._getTracker("UA-11564948-1"); pageTracker._trackPageview();} catch(err) {}</script>
