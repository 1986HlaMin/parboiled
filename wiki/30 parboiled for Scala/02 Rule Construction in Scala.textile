A "PEG":http://en.wikipedia.org/wiki/Parsing_expression_grammar consists of an arbitrary number of *rules*
(also called _expressions_ or _productions_) that are compositions of other rules, _terminals_ (essentially characters
or strings) and the seven primitive rules in the following table (where _a_ and _b_ denote other parsing rules).

|_<. Name |_<. Common Notation |_<. _parboiled_ Primitive |
| Sequence | _a_ _b_ | a "~": b |
| Ordered Choice | _a_ / _b_ | a &#124; b |
| Zero-or-more | _a_ * | zeroOrMore(a) |
| One-or-more | _a_ + | oneOrMore(a) |
| Optional | _a_ ? | optional(a) |
| And-predicate | & _a_ | &a |
| Not-predicate | ! _a_ | !a |

As you can see the PEG primitives are directly mapped to _parboiled_ counterparts, which makes transscribing existing
PEG grammars very easy. The _parboiled_ primitives are methods defined in the various "Rule":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule.html
derivatives as well as the "Parser":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Parser.html trait.

Typically you define a custom parser class mixin in the "Parser":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Parser.html
trait and defining rule methods. A rule method returns one of the various "Rule":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule.html
implementations and mostly consists of a simple call to the method "rule" mixed in by the "Parser":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Parser.html
trait. The function block passed as a parameter to the "rule" method contains the actual rule "specification".

The following grammar for example will match any string containing a number of 'a' characters followed by the same number of 'b' characters:

bq. Expression ← a Expression* b

The _parboiled for Scala_ parser for this language would look like this:

bc. class ABExpressionParser extends Parser {
    def Expression = rule { "a" ~ zeroOrMore(Expression) ~ "b") }
}

At first this might look like resulting in an infinite recursion. However, the "rule" method prevents infinite recursions
by inserting caching code and proxy objects where required.

Additionally to the primitive methods listed in the table above the following primitives are also available.

|_. Method/Field |_. Description |
| ANY | Matches any single character except "EOI":http://sirthias.github.com/parboiled/javadoc/org/parboiled/support/Characters.html#EOI |
| EMPTY | Explicitly matches nothing |
| EOI | Matches the special "EOI":http://sirthias.github.com/parboiled/javadoc/org/parboiled/support/Characters.html#EOI character |
| ch(char) | Explicitly creates a rule matching one single character |
| <string> - <string> | Matches a character from a given range (the two string have to be single character strings!) |
| anyOf(string) | Matches any one of the given strings characters |
| ignoreCase(char) | Matching one single character case-independently |
| ignoreCase(string) | Matching a given string case-independently |
| str(string) | Explicitly creates a rule matching a given string |

The "Parser":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Parser.html trait also defines three
implicit conversions from String, Array[Char] and Symbol to the respective rules, so you can generally use these directly
without explicit wrappers. Note that there is no implicit conversion from Char because _parboiled for Scala_ discourages the
use of Char literals in parser rules. Since scalas Predef object defines implicit conversions from Char to Int (and other
primitive widenings from Char) some constructs like the char range operator '-' would not work on Chars. Since using
strings is just as concise, allows for nice whitespace handling (see [[[[Handling Whitespace]]) and results in identical
rule structures (one char strings are automatically converted to fast single shar rules) there is no need to directly
support Char literals in rule expressions.

Additionally to the rule primitives listed in this section there are a couple more that are used to support
[[Parser Actions in Scala]].


<!-- please do not remove the GA tracking snippet below -->
<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try { var pageTracker = _gat._getTracker("UA-11564948-1"); pageTracker._trackPageview();} catch(err) {}</script>