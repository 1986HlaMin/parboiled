In _parboiled for Java_ you specify parser actions as boolean expressions, which are automatically turned into
parser action rules. There is no further typing of actions that allows _parboiled for Java_ to differentiate between
actions that push one, push two or pop five values of the parser value stack. This means that the Java developer cannot
rely on the compiler to validate the consistency of the value stack operations performed by these parser actions. As a result
_parboiled for Java_ demands more discipline during rule and action design (as outlined in [[Working with the Value Stack]]).

In _parboiled for Scala_ Scalas type inference capabilities make it feasible to support a higher level of abstraction
with regard to parser actions than their counterparts in _parboiled for Java_. In _parboiled for Scala_ parser actions
do not directly operate on the value stack but are specified as functions. As such they are not simply opaque blocks of
code but have a clearly defined type.

Depending on what parser actions are contained within a rule the actual class type of the rule changes. A rule without
any effect on the parser value stack has the type "Rule0":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule0.html.
A rule that results in one more value object of type A being pushed onto the parser value stack has type
"Rule1[A]":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule1.html. A rule that results in two more
value object of type A and B being pushed onto the parser value stack has type
"Rule2[A,B]":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule2.html. A rule that results in one
value object of type A being popped off the stack has type "PopRule1[Z]":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/PopRule1.html.
Currently there are a total of 17 different concrete rule types defined underneath the common, abstract super type
"Rule":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule.html.

This somewhat elaborate class structure allows _parboiled for Scala_ to encode in the type of the rule how exactly the
rule affects the parsers value stack and make sure that all the parser actions properly work together to produce the
parser end result value. Note that this does not impose any restrictions on the type of your value objects!

There are three different ways for your parser actions, i.e. action functions, to be linked into the rule structure:
# The '~>' operator
# The '~~>' operator
# Stand-alone actions

h3. The '~>' Operator

The '~>' operator is the way in which parser actions commonly receive matched input text. Its parameter is a function of
type (String ⇒ R). The operator internally creates a new action rule that, when run, passes the input text matched by
the immediately preceeding peer rule as an argument to the given function and pushes its result value onto the parsers
value stack. The type of the action and its result value is encoded in the return type of the operator.
The '~>' operator defined in "Rule0":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule0.html
returns a "Rule1":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule1.html, the one in
"Rule1":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule1.html returns a
"Rule2":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Rule2.html and so on.

h3. The '~~>' Operator

The '~~>' operator is the way in which parser actions commonly transform previously created, "lower-order" value objects
into "higher-order" ones. The operator always exists in several overloads that take as parameter a function, that
transforms the top _n_ objects off the top of the value stack into one higher-order object.
The operator internally creates a new action rule that, when run, pops the _n_ top object off the stack, feeds them
to the given function and pushes the functions result value back onto the stack. As such it is a "reduction operator"
that reduces _n_ stack elements to one new one.
The type of the action and its result value is encoded in the return type of the operator, which differs depending on
the type of the rule it is called on as well as the type of function it receives as parameter.

h3. Stand-alone Actions

Stand-alone actions are functions that are wrapped by different wrapper methods mixed in by the "Parser":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Parser.html
trait. These wrapper methods create stand-alone action rules which can be directly chained into sequences with the '~'
operator or used in other rule constructs (like optional(...) or zeroOrMore(...) primitives).

The following table lists all wrapper methods along with their semantics:

|_<. Method  |_<. Semantics |
| run(f: ⇒ Unit) | Most simple action taking no parameter and returning nothing |
| run(f: (Context[Any]) ⇒ Unit) | Simple action taking the current parsing "Context":http://sirthias.github.com/parboiled/javadoc/org/parboiled/Context.html as a parameter |
| runOnMatch(f: (String) ⇒ Unit) | Simple action taking the input text matched by the immediately preceeding rule as a parameter |
| test(f: ⇒ Boolean) | Semantic predicate without parameter |
| test(f: (Context[Any]) ⇒ Boolean) | Semantic predicate taking the current parsing "Context":http://sirthias.github.com/parboiled/javadoc/org/parboiled/Context.html as a parameter |
| testMatch(f: (String) ⇒ Boolean) | Semantic predicate taking the input text matched by the immediately preceeding rule as a parameter |

The rules created by these wrapper methods do not affect the value stack and as such do not change the rule type of the
sequence they are chained into.

The "Parser":http://sirthias.github.com/parboiled/scaladoc/org/parboiled/scala/Parser.html trait also defines a number
of function wrappers for stand-alone actions that operate on the value stack:

|_<. Method  |_<. Semantics |
| push[A](f: ⇒ A) | Action generating one value to push onto the value stack |
| push[A, B](a: ⇒ A, b: ⇒ B) | Action generating two values to push onto the value stack |
| push[A, B, C](a: ⇒ A, b: ⇒ B, c: ⇒ C) | Action generating three values to push onto the value stack |
| pop[Z](f: (Z) ⇒ Unit) | Action consuming the top element off the value stack |
| pop[Y, Z](f: (Y, Z) ⇒ Unit) | Action consuming the top two elements off the value stack |
| pop[X, Y, Z](f: (X, Y, Z) ⇒ Unit) | Action consuming the top three elements off the value stack |
| pop1() | Action dropping the top element off the value stack |
| pop2() | Action dropping the top two elements off the value stack |
| pop3() | Action dropping the top three elements off the value stack |

The rules created by these wrapper methods can also simply be chained into rule sequences.


For understanding how all these different action types work together to enable a concise and statically type-checked
rule design take a look at the [[JSON Parser]] example.

<!-- please do not remove the GA tracking snippet below -->
<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try { var pageTracker = _gat._getTracker("UA-11564948-1"); pageTracker._trackPageview();} catch(err) {}</script>