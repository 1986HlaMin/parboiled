Like most programs related to parsing _parboiled_ relies heavily on graph and tree structures. The first such structure
created during a _parboiled_ parsing process is the rule "tree" (you'll see why it is a "tree" and not a tree in moment).
This rule "tree" is still independent of the actual parsing input. The latter is consumed by the parser during a parsing
run and applied to the rule "tree", which optionally yields [[The Parse Tree]].

Consider this example grammar (ignore the pretty nonsensical language it describes, just look at the rule references):

bq. a ← b 'a' c
b ← 'b' d
c ← 'c' d
d ← 'd' c?

When you turn this grammar into a graph just showing rules as nodes and rule references as directed edges this grammar
can be represented by the following structure:

!http://sirthias.github.com/parboiled/images/rule_graph.png!

As you can see this graph has a cycle and node _d_ has two parents, which is why this graph is not a tree but just a
plain _directed graph_. Most "real-world" grammars however are in large parts very tree-like, with a pretty clear
hierarchy of rules referencing sub rules. Although loop-backs (recursions) are not exactly rare their number is small
compared with "regular", hierarchical references.
This, plus the fact that to many people trees are a more common mental picture, you might choose to think of the rule
graph as a rule "tree" with two potential exceptions: multi-parent nodes and loop-backs.

Incidentally this directed graph nature of PEG grammars almost matches the way method calls work in the JVM, with a
method calling other methods, potentially including call stack ancestors. This is why _parboiled_ maps rule declaration
(or rather "construction") more or less directly onto Java or Scala methods. Each of your parser "rule" methods
constructs a Rule object, potentially calling other rule constructing methods in the process.

There are however two complications:
# Java or Scala methods recursing into themselves or an ancestor need a way to terminate the recursion. Usually this
happens through some logic, which "exits" the recursion based on some condition. A rule declaration however does no such
thing, only the parsed input text (which is always finite) will terminate any rule recursion. Therefore _parboiled_
needs to pull some tricks to prevent the rule constructing Java / Scala methods from recursing infinitely.
# When a rule constructing method is called several times (because it is referenced from several other rules) it will
create a new rule instance of the same identical structure with every call. Even though this is not a problem per se it
could become very inefficient for larger grammars, with a huge rule tree potentially containing many duplicated rules instances.

_parboiled for Java_ takes care of these two problems by rewriting the rule methods (public, instance,
"Rule":http://sirthias.github.com/parboiled/api/org/parboiled/Rule.html returning) of your parser class and injecting
code that is invisible to the user. This code makes sure that each method is called only once, i.e. each rule is only
created once, and all further calls ("references") receive the same Rule instance. Should the rule creation recurse back
into itself proxy rules are inserted that prevent infinite recursions. All these things happen transparently behind the
scenes, you do not need to worry about them.

_parboiled for Scala_ achieves the same thing without rewriting the actual method byte code by encapsulating your actual
rule creation code in a function (block) argument to the main rule building method (

In the end, when you call your top level rule method to pass it to the "parse":http://sirthias.github.com/parboiled/api/org/parboiled/BaseParser.html#parse(org.parboiled.Rule,%20java.lang.String) method, you get back the root of a rule "tree" just like show in Fig. 1, without duplicated nodes and proper links, even for recursions.

h4. Matchers

As you might have already seen in the "API documentation":http://sirthias.github.com/parboiled/api/ the "Rule":http://sirthias.github.com/parboiled/api/org/parboiled/Rule.html interface is merely a "facade" interface with only a few methods specifying special Rule attributes. The classes actually implementing this interface are defined in package "org.parboiled.matchers":http://sirthias.github.com/parboiled/api/org/parboiled/matchers/package-frame.html. There is one "Matcher":http://sirthias.github.com/parboiled/api/org/parboiled/matchers/Matcher.html implementation for every rule primitive (a "SequenceMatcher":http://sirthias.github.com/parboiled/api/org/parboiled/matchers/SequenceMatcher.html, a "OneOrMoreMatcher":http://sirthias.github.com/parboiled/api/org/parboiled/matchers/OneOrMoreMatcher.html and so on), which implements the logic for this particular rule type. So the Rule "tree" is in fact a "Matcher":http://sirthias.github.com/parboiled/api/org/parboiled/matchers/Matcher.html "tree". However, most of the time you will not need to know about these _parboiled_ internals, but rather concentrate on working with the parse tree.


<!-- please do not remove the GA tracking snippet below -->
<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try { var pageTracker = _gat._getTracker("UA-11564948-1"); pageTracker._trackPageview();} catch(err) {}</script>