package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param {
        return name;
    }
}
===
Invalid input '{', expected ' ', '\t', '\r', '\n', '\f', "/*", "//", dim, ',' or ')' (line 3, pos 36):
    public String method(int param {
                                   ^
===
[compilationUnit]E 'package org.parboiled.examples;\npublic class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
    [optional]
        [spacing]
    [optional] 'package org.parboiled.examples;\n'
        [packageDeclaration] 'package org.parboiled.examples;\n'
            [sequence] 'package org.parboiled.examples;\n'
                ['package'] 'package '
                [qualifiedIdentifier] 'org.parboiled.examples'
                    [identifier] 'org'
                    [zeroOrMore] '.parboiled.examples'
                        [sequence] '.parboiled'
                            ['.'] '.'
                            [identifier] 'parboiled'
                        [sequence] '.examples'
                            ['.'] '.'
                            [identifier] 'examples'
                [';'] ';\n'
    [zeroOrMore]E 'public class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
        [typeDeclaration]E 'public class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
            [sequence]E 'public class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
                [zeroOrMore] 'public '
                    [modifier] 'public '
                        [sequence] 'public '
                            [firstOf] 'public'
                                ["public"] 'public'
                            [optional] ' '
                                [spacing] ' '
                [firstOf]E 'class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
                    [classDeclaration]E 'class JavaTestSource {\n    public String method(int param ){\n        return name;\n    }\n}\n'
                        ['class'] 'class '
                        [identifier] 'JavaTestSource '
                        [classBody]E '{\n    public String method(int param ){\n        return name;\n    }\n}\n'
                            ['{'] '{\n    '
                            [zeroOrMore]E 'public String method(int param ){\n        return name;\n    }\n'
                                [classBodyDeclaration]E 'public String method(int param ){\n        return name;\n    }\n'
                                    [sequence]E 'public String method(int param ){\n        return name;\n    }\n'
                                        [zeroOrMore] 'public '
                                            [modifier] 'public '
                                                [sequence] 'public '
                                                    [firstOf] 'public'
                                                        ["public"] 'public'
                                                    [optional] ' '
                                                        [spacing] ' '
                                        [memberDecl]E 'String method(int param ){\n        return name;\n    }\n'
                                            [sequence]E 'String method(int param ){\n        return name;\n    }\n'
                                                [type] 'String '
                                                    [firstOf] 'String '
                                                        [classType] 'String '
                                                            [identifier] 'String '
                                                [identifier] 'method'
                                                [methodDeclaratorRest]E '(int param ){\n        return name;\n    }\n'
                                                    [formalParameters]E '(int param )'
                                                        ['('] '('
                                                        [optional] 'int param '
                                                            [formalParameterDecls] 'int param '
                                                                [type] 'int '
                                                                    [firstOf] 'int '
                                                                        [basicType] 'int '
                                                                            [firstOf] 'int'
                                                                                ["int"] 'int'
                                                                            [optional] ' '
                                                                                [spacing] ' '
                                                                [formalParameterDeclsRest] 'param '
                                                                    [sequence] 'param '
                                                                        [variableDeclaratorId] 'param '
                                                                            [identifier] 'param '
                                                        [')']E ')'
                                                            [')']E ')'
                                                    [firstOf] '{\n        return name;\n    }\n'
                                                        [methodBody] '{\n        return name;\n    }\n'
                                                            ['{'] '{\n        '
                                                            [blockStatements] 'return name;\n    '
                                                                [blockStatement] 'return name;\n    '
                                                                    [statement] 'return name;\n    '
                                                                        [sequence] 'return name;\n    '
                                                                            ['return'] 'return '
                                                                            [optional] 'name'
                                                                                [expression] 'name'
                                                                                    [conditionalExpression] 'name'
                                                                                        [conditionalOrExpression] 'name'
                                                                                            [conditionalAndExpression] 'name'
                                                                                                [inclusiveOrExpression] 'name'
                                                                                                    [exclusiveOrExpression] 'name'
                                                                                                        [andExpression] 'name'
                                                                                                            [equalityExpression] 'name'
                                                                                                                [relationalExpression] 'name'
                                                                                                                    [shiftExpression] 'name'
                                                                                                                        [additiveExpression] 'name'
                                                                                                                            [multiplicativeExpression] 'name'
                                                                                                                                [unaryExpression] 'name'
                                                                                                                                    [sequence] 'name'
                                                                                                                                        [primary] 'name'
                                                                                                                                            [sequence] 'name'
                                                                                                                                                [qualifiedIdentifier] 'name'
                                                                                                                                                    [identifier] 'name'
                                                                            [';'] ';\n    '
                                                            ['}'] '}\n'
                            ['}'] '}\n'
    [EOI]
###
package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param) {
        String name = toString(;
        return name;
    }
}
===
Invalid input ';', expected spacing, expression or ')' (line 4, pos 32):
        String name = toString(;
                               ^
===
[compilationUnit]E 'package org.parboiled.examples;\npublic class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
    [optional]
        [spacing]
    [optional] 'package org.parboiled.examples;\n'
        [packageDeclaration] 'package org.parboiled.examples;\n'
            [sequence] 'package org.parboiled.examples;\n'
                ['package'] 'package '
                [qualifiedIdentifier] 'org.parboiled.examples'
                    [identifier] 'org'
                    [zeroOrMore] '.parboiled.examples'
                        [sequence] '.parboiled'
                            ['.'] '.'
                            [identifier] 'parboiled'
                        [sequence] '.examples'
                            ['.'] '.'
                            [identifier] 'examples'
                [';'] ';\n'
    [zeroOrMore]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
        [typeDeclaration]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
            [sequence]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
                [zeroOrMore] 'public '
                    [modifier] 'public '
                        [sequence] 'public '
                            [firstOf] 'public'
                                ["public"] 'public'
                            [optional] ' '
                                [spacing] ' '
                [firstOf]E 'class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
                    [classDeclaration]E 'class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
                        ['class'] 'class '
                        [identifier] 'JavaTestSource '
                        [classBody]E '{\n    public String method(int param) {\n        String name = toString();\n        return name;\n    }\n}\n'
                            ['{'] '{\n    '
                            [zeroOrMore]E 'public String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                                [classBodyDeclaration]E 'public String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                                    [sequence]E 'public String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                                        [zeroOrMore] 'public '
                                            [modifier] 'public '
                                                [sequence] 'public '
                                                    [firstOf] 'public'
                                                        ["public"] 'public'
                                                    [optional] ' '
                                                        [spacing] ' '
                                        [memberDecl]E 'String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                                            [sequence]E 'String method(int param) {\n        String name = toString();\n        return name;\n    }\n'
                                                [type] 'String '
                                                    [firstOf] 'String '
                                                        [classType] 'String '
                                                            [identifier] 'String '
                                                [identifier] 'method'
                                                [methodDeclaratorRest]E '(int param) {\n        String name = toString();\n        return name;\n    }\n'
                                                    [formalParameters] '(int param) '
                                                        ['('] '('
                                                        [optional] 'int param'
                                                            [formalParameterDecls] 'int param'
                                                                [type] 'int '
                                                                    [firstOf] 'int '
                                                                        [basicType] 'int '
                                                                            [firstOf] 'int'
                                                                                ["int"] 'int'
                                                                            [optional] ' '
                                                                                [spacing] ' '
                                                                [formalParameterDeclsRest] 'param'
                                                                    [sequence] 'param'
                                                                        [variableDeclaratorId] 'param'
                                                                            [identifier] 'param'
                                                        [')'] ') '
                                                    [firstOf]E '{\n        String name = toString();\n        return name;\n    }\n'
                                                        [methodBody]E '{\n        String name = toString();\n        return name;\n    }\n'
                                                            ['{'] '{\n        '
                                                            [blockStatements]E 'String name = toString();\n        return name;\n    '
                                                                [blockStatement]E 'String name = toString();\n        '
                                                                    [localVariableDeclarationStatement]E 'String name = toString();\n        '
                                                                        [type] 'String '
                                                                            [firstOf] 'String '
                                                                                [classType] 'String '
                                                                                    [identifier] 'String '
                                                                        [variableDeclarators]E 'name = toString()'
                                                                            [variableDeclarator]E 'name = toString()'
                                                                                [identifier] 'name '
                                                                                [optional]E '= toString()'
                                                                                    [sequence]E '= toString()'
                                                                                        ['='] '= '
                                                                                        [variableInitializer]E 'toString()'
                                                                                            [expression]E 'toString()'
                                                                                                [conditionalExpression]E 'toString()'
                                                                                                    [conditionalOrExpression]E 'toString()'
                                                                                                        [conditionalAndExpression]E 'toString()'
                                                                                                            [inclusiveOrExpression]E 'toString()'
                                                                                                                [exclusiveOrExpression]E 'toString()'
                                                                                                                    [andExpression]E 'toString()'
                                                                                                                        [equalityExpression]E 'toString()'
                                                                                                                            [relationalExpression]E 'toString()'
                                                                                                                                [shiftExpression]E 'toString()'
                                                                                                                                    [additiveExpression]E 'toString()'
                                                                                                                                        [multiplicativeExpression]E 'toString()'
                                                                                                                                            [unaryExpression]E 'toString()'
                                                                                                                                                [sequence]E 'toString()'
                                                                                                                                                    [primary]E 'toString()'
                                                                                                                                                        [sequence]E 'toString()'
                                                                                                                                                            [qualifiedIdentifier] 'toString'
                                                                                                                                                                [identifier] 'toString'
                                                                                                                                                            [optional]E '()'
                                                                                                                                                                [identifierSuffix]E '()'
                                                                                                                                                                    [arguments]E '()'
                                                                                                                                                                        ['('] '('
                                                                                                                                                                        [')']E ')'
                                                                                                                                                                            [')']E ')'
                                                                        [';'] ';\n        '
                                                                [blockStatement] 'return name;\n    '
                                                                    [statement] 'return name;\n    '
                                                                        [sequence] 'return name;\n    '
                                                                            ['return'] 'return '
                                                                            [optional] 'name'
                                                                                [expression] 'name'
                                                                                    [conditionalExpression] 'name'
                                                                                        [conditionalOrExpression] 'name'
                                                                                            [conditionalAndExpression] 'name'
                                                                                                [inclusiveOrExpression] 'name'
                                                                                                    [exclusiveOrExpression] 'name'
                                                                                                        [andExpression] 'name'
                                                                                                            [equalityExpression] 'name'
                                                                                                                [relationalExpression] 'name'
                                                                                                                    [shiftExpression] 'name'
                                                                                                                        [additiveExpression] 'name'
                                                                                                                            [multiplicativeExpression] 'name'
                                                                                                                                [unaryExpression] 'name'
                                                                                                                                    [sequence] 'name'
                                                                                                                                        [primary] 'name'
                                                                                                                                            [sequence] 'name'
                                                                                                                                                [qualifiedIdentifier] 'name'
                                                                                                                                                    [identifier] 'name'
                                                                            [';'] ';\n    '
                                                            ['}'] '}\n'
                            ['}'] '}\n'
    [EOI]
###
package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param) {
        String name = toString();
        return name
    }
}
===
Invalid input '}', expected ' ', '\t', '\r', '\n', '\f', "/*", "//", '.', identifierSuffix, selector, postFixOp, '*', '/', '%', '+', '-', '<<', '>>', '>>>', '<=', '>=', '<', '>', 'instanceof', '==', '!=', '&', '^', '|', '&&', '||', '?', assignmentOperator or ';' (line 6, pos 5):
    }
    ^
===
[compilationUnit]E 'package org.parboiled.examples;\npublic class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
    [optional]
        [spacing]
    [optional] 'package org.parboiled.examples;\n'
        [packageDeclaration] 'package org.parboiled.examples;\n'
            [sequence] 'package org.parboiled.examples;\n'
                ['package'] 'package '
                [qualifiedIdentifier] 'org.parboiled.examples'
                    [identifier] 'org'
                    [zeroOrMore] '.parboiled.examples'
                        [sequence] '.parboiled'
                            ['.'] '.'
                            [identifier] 'parboiled'
                        [sequence] '.examples'
                            ['.'] '.'
                            [identifier] 'examples'
                [';'] ';\n'
    [zeroOrMore]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
        [typeDeclaration]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
            [sequence]E 'public class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
                [zeroOrMore] 'public '
                    [modifier] 'public '
                        [sequence] 'public '
                            [firstOf] 'public'
                                ["public"] 'public'
                            [optional] ' '
                                [spacing] ' '
                [firstOf]E 'class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
                    [classDeclaration]E 'class JavaTestSource {\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
                        ['class'] 'class '
                        [identifier] 'JavaTestSource '
                        [classBody]E '{\n    public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n}\n'
                            ['{'] '{\n    '
                            [zeroOrMore]E 'public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                                [classBodyDeclaration]E 'public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                                    [sequence]E 'public String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                                        [zeroOrMore] 'public '
                                            [modifier] 'public '
                                                [sequence] 'public '
                                                    [firstOf] 'public'
                                                        ["public"] 'public'
                                                    [optional] ' '
                                                        [spacing] ' '
                                        [memberDecl]E 'String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                                            [sequence]E 'String method(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                                                [type] 'String '
                                                    [firstOf] 'String '
                                                        [classType] 'String '
                                                            [identifier] 'String '
                                                [identifier] 'method'
                                                [methodDeclaratorRest]E '(int param) {\n        String name = toString();\n        return name\n    ;}\n'
                                                    [formalParameters] '(int param) '
                                                        ['('] '('
                                                        [optional] 'int param'
                                                            [formalParameterDecls] 'int param'
                                                                [type] 'int '
                                                                    [firstOf] 'int '
                                                                        [basicType] 'int '
                                                                            [firstOf] 'int'
                                                                                ["int"] 'int'
                                                                            [optional] ' '
                                                                                [spacing] ' '
                                                                [formalParameterDeclsRest] 'param'
                                                                    [sequence] 'param'
                                                                        [variableDeclaratorId] 'param'
                                                                            [identifier] 'param'
                                                        [')'] ') '
                                                    [firstOf]E '{\n        String name = toString();\n        return name\n    ;}\n'
                                                        [methodBody]E '{\n        String name = toString();\n        return name\n    ;}\n'
                                                            ['{'] '{\n        '
                                                            [blockStatements]E 'String name = toString();\n        return name\n    ;'
                                                                [blockStatement] 'String name = toString();\n        '
                                                                    [localVariableDeclarationStatement] 'String name = toString();\n        '
                                                                        [type] 'String '
                                                                            [firstOf] 'String '
                                                                                [classType] 'String '
                                                                                    [identifier] 'String '
                                                                        [variableDeclarators] 'name = toString()'
                                                                            [variableDeclarator] 'name = toString()'
                                                                                [identifier] 'name '
                                                                                [optional] '= toString()'
                                                                                    [sequence] '= toString()'
                                                                                        ['='] '= '
                                                                                        [variableInitializer] 'toString()'
                                                                                            [expression] 'toString()'
                                                                                                [conditionalExpression] 'toString()'
                                                                                                    [conditionalOrExpression] 'toString()'
                                                                                                        [conditionalAndExpression] 'toString()'
                                                                                                            [inclusiveOrExpression] 'toString()'
                                                                                                                [exclusiveOrExpression] 'toString()'
                                                                                                                    [andExpression] 'toString()'
                                                                                                                        [equalityExpression] 'toString()'
                                                                                                                            [relationalExpression] 'toString()'
                                                                                                                                [shiftExpression] 'toString()'
                                                                                                                                    [additiveExpression] 'toString()'
                                                                                                                                        [multiplicativeExpression] 'toString()'
                                                                                                                                            [unaryExpression] 'toString()'
                                                                                                                                                [sequence] 'toString()'
                                                                                                                                                    [primary] 'toString()'
                                                                                                                                                        [sequence] 'toString()'
                                                                                                                                                            [qualifiedIdentifier] 'toString'
                                                                                                                                                                [identifier] 'toString'
                                                                                                                                                            [optional] '()'
                                                                                                                                                                [identifierSuffix] '()'
                                                                                                                                                                    [arguments] '()'
                                                                                                                                                                        ['('] '('
                                                                                                                                                                        [')'] ')'
                                                                        [';'] ';\n        '
                                                                [blockStatement]E 'return name\n    ;'
                                                                    [statement]E 'return name\n    ;'
                                                                        [sequence]E 'return name\n    ;'
                                                                            ['return'] 'return '
                                                                            [optional] 'name\n    '
                                                                                [expression] 'name\n    '
                                                                                    [conditionalExpression] 'name\n    '
                                                                                        [conditionalOrExpression] 'name\n    '
                                                                                            [conditionalAndExpression] 'name\n    '
                                                                                                [inclusiveOrExpression] 'name\n    '
                                                                                                    [exclusiveOrExpression] 'name\n    '
                                                                                                        [andExpression] 'name\n    '
                                                                                                            [equalityExpression] 'name\n    '
                                                                                                                [relationalExpression] 'name\n    '
                                                                                                                    [shiftExpression] 'name\n    '
                                                                                                                        [additiveExpression] 'name\n    '
                                                                                                                            [multiplicativeExpression] 'name\n    '
                                                                                                                                [unaryExpression] 'name\n    '
                                                                                                                                    [sequence] 'name\n    '
                                                                                                                                        [primary] 'name\n    '
                                                                                                                                            [sequence] 'name\n    '
                                                                                                                                                [qualifiedIdentifier] 'name\n    '
                                                                                                                                                    [identifier] 'name\n    '
                                                                            [';']E ';'
                                                                                [';']E ';'
                                                            ['}'] '}\n'
                            ['}'] '}\n'
    [EOI]
