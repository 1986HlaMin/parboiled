package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param {
        return name;
    }
}
===
Invalid input '{', expected ' ', '\t', '\r', '\n', '\f', "/*", "//", dim, ',' or ')' (line 3, pos 36):
    public String method(int param {
                                   ^
===
[compilationUnit] 'package org.parboiled.examples;\n\npublic class JavaTestSource {\n\n    public String method(int param {\n\n        return name;\n\n    }\n\n}\n\n'
    [optional]
        [spacing]
    [optional] 'package org.parboiled.examples;\n\n'
        [packageDeclaration] 'package org.parboiled.examples;\n\n'
            [sequence] 'package org.parboiled.examples;\n\n'
                ['package'] 'package '
                [qualifiedIdentifier] 'org.parboiled.examples'
                    [identifier] 'org'
                    [zeroOrMore] '.parboiled.examples'
                        [sequence] '.parboiled'
                            ['.'] '.'
                            [identifier] 'parboiled'
                        [sequence] '.examples'
                            ['.'] '.'
                            [identifier] 'examples'
                [';'] ';\n\n'
    [zeroOrMore] 'public class JavaTestSource {\n\n    public String method(int param {\n\n        return name;\n\n    }\n\n}\n\n'
        [typeDeclaration] 'public class JavaTestSource {\n\n    public String method(int param {\n\n        return name;\n\n    }\n\n}\n\n'
            [sequence] 'public class JavaTestSource {\n\n    public String method(int param {\n\n        return name;\n\n    }\n\n}\n\n'
                [zeroOrMore] 'public '
                    [modifier] 'public '
                        [sequence] 'public '
                            [firstOf] 'public'
                                ["public"] 'public'
                            [optional] ' '
                                [spacing] ' '
                [firstOf] 'class JavaTestSource {\n\n    public String method(int param {\n\n        return name;\n\n    }\n\n}\n\n'
                    [classDeclaration] 'class JavaTestSource {\n\n    public String method(int param {\n\n        return name;\n\n    }\n\n}\n\n'
                        ['class'] 'class '
                        [identifier] 'JavaTestSource '
                        [classBody] '{\n\n    public String method(int param {\n\n        return name;\n\n    }\n\n}\n\n'
                            ['{'] '{\n\n    '
                            [zeroOrMore] 'public String method(int param {\n\n        return name;\n\n    }\n\n'
                                [classBodyDeclaration] 'public String method(int param {\n\n        return name;\n\n    }\n\n'
                                    [sequence] 'public String method(int param {\n\n        return name;\n\n    }\n\n'
                                        [zeroOrMore] 'public '
                                            [modifier] 'public '
                                                [sequence] 'public '
                                                    [firstOf] 'public'
                                                        ["public"] 'public'
                                                    [optional] ' '
                                                        [spacing] ' '
                                        [memberDecl] 'String method(int param {\n\n        return name;\n\n    }\n\n'
                                            [sequence] 'String method(int param {\n\n        return name;\n\n    }\n\n'
                                                [type] 'String '
                                                    [firstOf] 'String '
                                                        [classType] 'String '
                                                            [identifier] 'String '
                                                [identifier] 'method'
                                                [methodDeclaratorRest] '(int param {\n\n        return name;\n\n    }\n\n'
                                                    [formalParameters] '(int param '
                                                        ['('] '('
                                                        [optional] 'int param '
                                                            [formalParameterDecls] 'int param '
                                                                [type] 'int '
                                                                    [firstOf] 'int '
                                                                        [basicType] 'int '
                                                                            [firstOf] 'int'
                                                                                ["int"] 'int'
                                                                            [optional] ' '
                                                                                [spacing] ' '
                                                                [formalParameterDeclsRest] 'param '
                                                                    [sequence] 'param '
                                                                        [variableDeclaratorId] 'param '
                                                                            [identifier] 'param '
                                                                                [optional] ' '
                                                                                    [spacing] ' '
                                                        [')']
                                                            [')']
                                                    [firstOf] '{\n\n        return name;\n\n    }\n\n'
                                                        [methodBody] '{\n\n        return name;\n\n    }\n\n'
                                                            ['{'] '{\n\n        '
                                                            [blockStatements] 'return name;\n\n    '
                                                                [blockStatement] 'return name;\n\n    '
                                                                    [statement] 'return name;\n\n    '
                                                                        [sequence] 'return name;\n\n    '
                                                                            ['return'] 'return '
                                                                            [optional] 'name'
                                                                                [expression] 'name'
                                                                                    [conditionalExpression] 'name'
                                                                                        [conditionalOrExpression] 'name'
                                                                                            [conditionalAndExpression] 'name'
                                                                                                [inclusiveOrExpression] 'name'
                                                                                                    [exclusiveOrExpression] 'name'
                                                                                                        [andExpression] 'name'
                                                                                                            [equalityExpression] 'name'
                                                                                                                [relationalExpression] 'name'
                                                                                                                    [shiftExpression] 'name'
                                                                                                                        [additiveExpression] 'name'
                                                                                                                            [multiplicativeExpression] 'name'
                                                                                                                                [unaryExpression] 'name'
                                                                                                                                    [sequence] 'name'
                                                                                                                                        [primary] 'name'
                                                                                                                                            [sequence] 'name'
                                                                                                                                                [qualifiedIdentifier] 'name'
                                                                                                                                                    [identifier] 'name'
                                                                            [';'] ';\n\n    '
                                                            ['}'] '}\n\n'
                            ['}'] '}\n\n'
    [EOI]
###
package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param) {
        String name = toString(;
        return name;
    }
}
===
Invalid input ';', expected spacing, expression or ')' (line 4, pos 32):
        String name = toString(;
                               ^
===
[compilationUnit] 'package org.parboiled.examples;\n\npublic class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n}\n\n'
    [optional]
        [spacing]
    [optional] 'package org.parboiled.examples;\n\n'
        [packageDeclaration] 'package org.parboiled.examples;\n\n'
            [sequence] 'package org.parboiled.examples;\n\n'
                ['package'] 'package '
                [qualifiedIdentifier] 'org.parboiled.examples'
                    [identifier] 'org'
                    [zeroOrMore] '.parboiled.examples'
                        [sequence] '.parboiled'
                            ['.'] '.'
                            [identifier] 'parboiled'
                        [sequence] '.examples'
                            ['.'] '.'
                            [identifier] 'examples'
                [';'] ';\n\n'
    [zeroOrMore] 'public class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n}\n\n'
        [typeDeclaration] 'public class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n}\n\n'
            [sequence] 'public class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n}\n\n'
                [zeroOrMore] 'public '
                    [modifier] 'public '
                        [sequence] 'public '
                            [firstOf] 'public'
                                ["public"] 'public'
                            [optional] ' '
                                [spacing] ' '
                [firstOf] 'class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n}\n\n'
                    [classDeclaration] 'class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n}\n\n'
                        ['class'] 'class '
                        [identifier] 'JavaTestSource '
                        [classBody] '{\n\n    public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n}\n\n'
                            ['{'] '{\n\n    '
                            [zeroOrMore] 'public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n'
                                [classBodyDeclaration] 'public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n'
                                    [sequence] 'public String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n'
                                        [zeroOrMore] 'public '
                                            [modifier] 'public '
                                                [sequence] 'public '
                                                    [firstOf] 'public'
                                                        ["public"] 'public'
                                                    [optional] ' '
                                                        [spacing] ' '
                                        [memberDecl] 'String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n'
                                            [sequence] 'String method(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n'
                                                [type] 'String '
                                                    [firstOf] 'String '
                                                        [classType] 'String '
                                                            [identifier] 'String '
                                                [identifier] 'method'
                                                [methodDeclaratorRest] '(int param) {\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n'
                                                    [formalParameters] '(int param) '
                                                        ['('] '('
                                                        [optional] 'int param'
                                                            [formalParameterDecls] 'int param'
                                                                [type] 'int '
                                                                    [firstOf] 'int '
                                                                        [basicType] 'int '
                                                                            [firstOf] 'int'
                                                                                ["int"] 'int'
                                                                            [optional] ' '
                                                                                [spacing] ' '
                                                                [formalParameterDeclsRest] 'param'
                                                                    [sequence] 'param'
                                                                        [variableDeclaratorId] 'param'
                                                                            [identifier] 'param'
                                                        [')'] ') '
                                                    [firstOf] '{\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n'
                                                        [methodBody] '{\n\n        String name = toString(;\n\n        return name;\n\n    }\n\n'
                                                            ['{'] '{\n\n        '
                                                            [blockStatements] 'String name = toString(;\n\n        return name;\n\n    '
                                                                [blockStatement] 'String name = toString(;\n\n        '
                                                                    [localVariableDeclarationStatement] 'String name = toString(;\n\n        '
                                                                        [type] 'String '
                                                                            [firstOf] 'String '
                                                                                [classType] 'String '
                                                                                    [identifier] 'String '
                                                                        [variableDeclarators] 'name = toString('
                                                                            [variableDeclarator] 'name = toString('
                                                                                [identifier] 'name '
                                                                                [optional] '= toString('
                                                                                    [sequence] '= toString('
                                                                                        ['='] '= '
                                                                                        [variableInitializer] 'toString('
                                                                                            [expression] 'toString('
                                                                                                [conditionalExpression] 'toString('
                                                                                                    [conditionalOrExpression] 'toString('
                                                                                                        [conditionalAndExpression] 'toString('
                                                                                                            [inclusiveOrExpression] 'toString('
                                                                                                                [exclusiveOrExpression] 'toString('
                                                                                                                    [andExpression] 'toString('
                                                                                                                        [equalityExpression] 'toString('
                                                                                                                            [relationalExpression] 'toString('
                                                                                                                                [shiftExpression] 'toString('
                                                                                                                                    [additiveExpression] 'toString('
                                                                                                                                        [multiplicativeExpression] 'toString('
                                                                                                                                            [unaryExpression] 'toString('
                                                                                                                                                [sequence] 'toString('
                                                                                                                                                    [primary] 'toString('
                                                                                                                                                        [sequence] 'toString('
                                                                                                                                                            [qualifiedIdentifier] 'toString'
                                                                                                                                                                [identifier] 'toString'
                                                                                                                                                            [optional] '('
                                                                                                                                                                [identifierSuffix] '('
                                                                                                                                                                    [arguments] '('
                                                                                                                                                                        ['('] '('
                                                                                                                                                                            [optional]
                                                                                                                                                                                [spacing]
                                                                                                                                                                        [')']
                                                                                                                                                                            [')']
                                                                        [';'] ';\n\n        '
                                                                [blockStatement] 'return name;\n\n    '
                                                                    [statement] 'return name;\n\n    '
                                                                        [sequence] 'return name;\n\n    '
                                                                            ['return'] 'return '
                                                                            [optional] 'name'
                                                                                [expression] 'name'
                                                                                    [conditionalExpression] 'name'
                                                                                        [conditionalOrExpression] 'name'
                                                                                            [conditionalAndExpression] 'name'
                                                                                                [inclusiveOrExpression] 'name'
                                                                                                    [exclusiveOrExpression] 'name'
                                                                                                        [andExpression] 'name'
                                                                                                            [equalityExpression] 'name'
                                                                                                                [relationalExpression] 'name'
                                                                                                                    [shiftExpression] 'name'
                                                                                                                        [additiveExpression] 'name'
                                                                                                                            [multiplicativeExpression] 'name'
                                                                                                                                [unaryExpression] 'name'
                                                                                                                                    [sequence] 'name'
                                                                                                                                        [primary] 'name'
                                                                                                                                            [sequence] 'name'
                                                                                                                                                [qualifiedIdentifier] 'name'
                                                                                                                                                    [identifier] 'name'
                                                                            [';'] ';\n\n    '
                                                            ['}'] '}\n\n'
                            ['}'] '}\n\n'
    [EOI]
###
package org.parboiled.examples;
public class JavaTestSource {
    public String method(int param) {
        String name = toString();
        return name
    }
}
===
Invalid input '}', expected ' ', '\t', '\r', '\n', '\f', "/*", "//", '.', identifierSuffix, selector, postFixOp, '*', '/', '%', '+', '-', '<<', '>>', '>>>', '<=', '>=', '<', '>', 'instanceof', '==', '!=', '&', '^', '|', '&&', '||', '?', assignmentOperator or ';' (line 6, pos 5):
    }
    ^
===
[compilationUnit] 'package org.parboiled.examples;\n\npublic class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n}\n\n'
    [optional]
        [spacing]
    [optional] 'package org.parboiled.examples;\n\n'
        [packageDeclaration] 'package org.parboiled.examples;\n\n'
            [sequence] 'package org.parboiled.examples;\n\n'
                ['package'] 'package '
                [qualifiedIdentifier] 'org.parboiled.examples'
                    [identifier] 'org'
                    [zeroOrMore] '.parboiled.examples'
                        [sequence] '.parboiled'
                            ['.'] '.'
                            [identifier] 'parboiled'
                        [sequence] '.examples'
                            ['.'] '.'
                            [identifier] 'examples'
                [';'] ';\n\n'
    [zeroOrMore] 'public class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n}\n\n'
        [typeDeclaration] 'public class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n}\n\n'
            [sequence] 'public class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n}\n\n'
                [zeroOrMore] 'public '
                    [modifier] 'public '
                        [sequence] 'public '
                            [firstOf] 'public'
                                ["public"] 'public'
                            [optional] ' '
                                [spacing] ' '
                [firstOf] 'class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n}\n\n'
                    [classDeclaration] 'class JavaTestSource {\n\n    public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n}\n\n'
                        ['class'] 'class '
                        [identifier] 'JavaTestSource '
                        [classBody] '{\n\n    public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n}\n\n'
                            ['{'] '{\n\n    '
                            [zeroOrMore] 'public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n'
                                [classBodyDeclaration] 'public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n'
                                    [sequence] 'public String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n'
                                        [zeroOrMore] 'public '
                                            [modifier] 'public '
                                                [sequence] 'public '
                                                    [firstOf] 'public'
                                                        ["public"] 'public'
                                                    [optional] ' '
                                                        [spacing] ' '
                                        [memberDecl] 'String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n'
                                            [sequence] 'String method(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n'
                                                [type] 'String '
                                                    [firstOf] 'String '
                                                        [classType] 'String '
                                                            [identifier] 'String '
                                                [identifier] 'method'
                                                [methodDeclaratorRest] '(int param) {\n\n        String name = toString();\n\n        return name\n\n    }\n\n'
                                                    [formalParameters] '(int param) '
                                                        ['('] '('
                                                        [optional] 'int param'
                                                            [formalParameterDecls] 'int param'
                                                                [type] 'int '
                                                                    [firstOf] 'int '
                                                                        [basicType] 'int '
                                                                            [firstOf] 'int'
                                                                                ["int"] 'int'
                                                                            [optional] ' '
                                                                                [spacing] ' '
                                                                [formalParameterDeclsRest] 'param'
                                                                    [sequence] 'param'
                                                                        [variableDeclaratorId] 'param'
                                                                            [identifier] 'param'
                                                        [')'] ') '
                                                    [firstOf] '{\n\n        String name = toString();\n\n        return name\n\n    }\n\n'
                                                        [methodBody] '{\n\n        String name = toString();\n\n        return name\n\n    }\n\n'
                                                            ['{'] '{\n\n        '
                                                            [blockStatements] 'String name = toString();\n\n        return name\n\n    '
                                                                [blockStatement] 'String name = toString();\n\n        '
                                                                    [localVariableDeclarationStatement] 'String name = toString();\n\n        '
                                                                        [type] 'String '
                                                                            [firstOf] 'String '
                                                                                [classType] 'String '
                                                                                    [identifier] 'String '
                                                                        [variableDeclarators] 'name = toString()'
                                                                            [variableDeclarator] 'name = toString()'
                                                                                [identifier] 'name '
                                                                                [optional] '= toString()'
                                                                                    [sequence] '= toString()'
                                                                                        ['='] '= '
                                                                                        [variableInitializer] 'toString()'
                                                                                            [expression] 'toString()'
                                                                                                [conditionalExpression] 'toString()'
                                                                                                    [conditionalOrExpression] 'toString()'
                                                                                                        [conditionalAndExpression] 'toString()'
                                                                                                            [inclusiveOrExpression] 'toString()'
                                                                                                                [exclusiveOrExpression] 'toString()'
                                                                                                                    [andExpression] 'toString()'
                                                                                                                        [equalityExpression] 'toString()'
                                                                                                                            [relationalExpression] 'toString()'
                                                                                                                                [shiftExpression] 'toString()'
                                                                                                                                    [additiveExpression] 'toString()'
                                                                                                                                        [multiplicativeExpression] 'toString()'
                                                                                                                                            [unaryExpression] 'toString()'
                                                                                                                                                [sequence] 'toString()'
                                                                                                                                                    [primary] 'toString()'
                                                                                                                                                        [sequence] 'toString()'
                                                                                                                                                            [qualifiedIdentifier] 'toString'
                                                                                                                                                                [identifier] 'toString'
                                                                                                                                                            [optional] '()'
                                                                                                                                                                [identifierSuffix] '()'
                                                                                                                                                                    [arguments] '()'
                                                                                                                                                                        ['('] '('
                                                                                                                                                                        [')'] ')'
                                                                        [';'] ';\n\n        '
                                                                [blockStatement] 'return name\n\n    '
                                                                    [statement] 'return name\n\n    '
                                                                        [sequence] 'return name\n\n    '
                                                                            ['return'] 'return '
                                                                            [optional] 'name\n\n    '
                                                                                [expression] 'name\n\n    '
                                                                                    [conditionalExpression] 'name\n\n    '
                                                                                        [conditionalOrExpression] 'name\n\n    '
                                                                                            [conditionalAndExpression] 'name\n\n    '
                                                                                                [inclusiveOrExpression] 'name\n\n    '
                                                                                                    [exclusiveOrExpression] 'name\n\n    '
                                                                                                        [andExpression] 'name\n\n    '
                                                                                                            [equalityExpression] 'name\n\n    '
                                                                                                                [relationalExpression] 'name\n\n    '
                                                                                                                    [shiftExpression] 'name\n\n    '
                                                                                                                        [additiveExpression] 'name\n\n    '
                                                                                                                            [multiplicativeExpression] 'name\n\n    '
                                                                                                                                [unaryExpression] 'name\n\n    '
                                                                                                                                    [sequence] 'name\n\n    '
                                                                                                                                        [primary] 'name\n\n    '
                                                                                                                                            [sequence] 'name\n\n    '
                                                                                                                                                [qualifiedIdentifier] 'name\n\n    '
                                                                                                                                                    [identifier] 'name\n\n    '
                                                                                                                                                        [optional] '\n\n    '
                                                                                                                                                            [spacing] '\n\n    '
                                                                            [';']
                                                                                [';']
                                                            ['}'] '}\n\n'
                            ['}'] '}\n\n'
    [EOI]
