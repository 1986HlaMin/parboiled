[compilationUnit] '/*\n\n * Copyright (C) 2009-2010 Mathias Doenitz\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the "License");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an "AS IS" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n\n\npackage org.parboiled.examples;\n\n\n\nimport org.parboiled.Parboiled;\n\nimport org.parboiled.Rule;\n\nimport org.parboiled.trees.Filter;\n\nimport org.parboiled.common.StringUtils;\n\nimport org.parboiled.examples.java.JavaParser;\n\nimport static org.parboiled.support.ParseTreeUtils.printNodeTree;\n\nimport org.parboiled.support.ParsingResult;\n\nimport org.parboiled.test.FileUtils;\n\nimport static org.parboiled.test.TestUtils.assertEqualsMultiline;\n\nimport static org.testng.Assert.fail;\n\nimport org.testng.annotations.Test;\n\n\n\npublic class JavaTest {\n\n\n\n    @Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n}'
    [optional] '/*\n\n * Copyright (C) 2009-2010 Mathias Doenitz\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the "License");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an "AS IS" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n\n\n'
        [spacing] '/*\n\n * Copyright (C) 2009-2010 Mathias Doenitz\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the "License");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an "AS IS" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n\n\n'
    [optional] 'package org.parboiled.examples;\n\n\n\n'
        [packageDeclaration] 'package org.parboiled.examples;\n\n\n\n'
            [sequence] 'package org.parboiled.examples;\n\n\n\n'
                ['package'] 'package '
                [qualifiedIdentifier] 'org.parboiled.examples'
                    [identifier] 'org'
                    [zeroOrMore] '.parboiled.examples'
                        [sequence] '.parboiled'
                            ['.'] '.'
                            [identifier] 'parboiled'
                        [sequence] '.examples'
                            ['.'] '.'
                            [identifier] 'examples'
                [';'] ';\n\n\n\n'
    [zeroOrMore] 'import org.parboiled.Parboiled;\n\nimport org.parboiled.Rule;\n\nimport org.parboiled.trees.Filter;\n\nimport org.parboiled.common.StringUtils;\n\nimport org.parboiled.examples.java.JavaParser;\n\nimport static org.parboiled.support.ParseTreeUtils.printNodeTree;\n\nimport org.parboiled.support.ParsingResult;\n\nimport org.parboiled.test.FileUtils;\n\nimport static org.parboiled.test.TestUtils.assertEqualsMultiline;\n\nimport static org.testng.Assert.fail;\n\nimport org.testng.annotations.Test;\n\n\n\n'
        [importDeclaration] 'import org.parboiled.Parboiled;\n\n'
            ['import'] 'import '
            [qualifiedIdentifier] 'org.parboiled.Parboiled'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.Parboiled'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.Parboiled'
                        ['.'] '.'
                        [identifier] 'Parboiled'
            [';'] ';\n\n'
        [importDeclaration] 'import org.parboiled.Rule;\n\n'
            ['import'] 'import '
            [qualifiedIdentifier] 'org.parboiled.Rule'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.Rule'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.Rule'
                        ['.'] '.'
                        [identifier] 'Rule'
            [';'] ';\n\n'
        [importDeclaration] 'import org.parboiled.trees.Filter;\n\n'
            ['import'] 'import '
            [qualifiedIdentifier] 'org.parboiled.trees.Filter'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.trees.Filter'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.trees'
                        ['.'] '.'
                        [identifier] 'trees'
                    [sequence] '.Filter'
                        ['.'] '.'
                        [identifier] 'Filter'
            [';'] ';\n\n'
        [importDeclaration] 'import org.parboiled.common.StringUtils;\n\n'
            ['import'] 'import '
            [qualifiedIdentifier] 'org.parboiled.common.StringUtils'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.common.StringUtils'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.common'
                        ['.'] '.'
                        [identifier] 'common'
                    [sequence] '.StringUtils'
                        ['.'] '.'
                        [identifier] 'StringUtils'
            [';'] ';\n\n'
        [importDeclaration] 'import org.parboiled.examples.java.JavaParser;\n\n'
            ['import'] 'import '
            [qualifiedIdentifier] 'org.parboiled.examples.java.JavaParser'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.examples.java.JavaParser'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.examples'
                        ['.'] '.'
                        [identifier] 'examples'
                    [sequence] '.java'
                        ['.'] '.'
                        [identifier] 'java'
                    [sequence] '.JavaParser'
                        ['.'] '.'
                        [identifier] 'JavaParser'
            [';'] ';\n\n'
        [importDeclaration] 'import static org.parboiled.support.ParseTreeUtils.printNodeTree;\n\n'
            ['import'] 'import '
            [optional] 'static '
                ['static'] 'static '
            [qualifiedIdentifier] 'org.parboiled.support.ParseTreeUtils.printNodeTree'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.support.ParseTreeUtils.printNodeTree'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.support'
                        ['.'] '.'
                        [identifier] 'support'
                    [sequence] '.ParseTreeUtils'
                        ['.'] '.'
                        [identifier] 'ParseTreeUtils'
                    [sequence] '.printNodeTree'
                        ['.'] '.'
                        [identifier] 'printNodeTree'
            [';'] ';\n\n'
        [importDeclaration] 'import org.parboiled.support.ParsingResult;\n\n'
            ['import'] 'import '
            [qualifiedIdentifier] 'org.parboiled.support.ParsingResult'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.support.ParsingResult'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.support'
                        ['.'] '.'
                        [identifier] 'support'
                    [sequence] '.ParsingResult'
                        ['.'] '.'
                        [identifier] 'ParsingResult'
            [';'] ';\n\n'
        [importDeclaration] 'import org.parboiled.test.FileUtils;\n\n'
            ['import'] 'import '
            [qualifiedIdentifier] 'org.parboiled.test.FileUtils'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.test.FileUtils'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.test'
                        ['.'] '.'
                        [identifier] 'test'
                    [sequence] '.FileUtils'
                        ['.'] '.'
                        [identifier] 'FileUtils'
            [';'] ';\n\n'
        [importDeclaration] 'import static org.parboiled.test.TestUtils.assertEqualsMultiline;\n\n'
            ['import'] 'import '
            [optional] 'static '
                ['static'] 'static '
            [qualifiedIdentifier] 'org.parboiled.test.TestUtils.assertEqualsMultiline'
                [identifier] 'org'
                [zeroOrMore] '.parboiled.test.TestUtils.assertEqualsMultiline'
                    [sequence] '.parboiled'
                        ['.'] '.'
                        [identifier] 'parboiled'
                    [sequence] '.test'
                        ['.'] '.'
                        [identifier] 'test'
                    [sequence] '.TestUtils'
                        ['.'] '.'
                        [identifier] 'TestUtils'
                    [sequence] '.assertEqualsMultiline'
                        ['.'] '.'
                        [identifier] 'assertEqualsMultiline'
            [';'] ';\n\n'
        [importDeclaration] 'import static org.testng.Assert.fail;\n\n'
            ['import'] 'import '
            [optional] 'static '
                ['static'] 'static '
            [qualifiedIdentifier] 'org.testng.Assert.fail'
                [identifier] 'org'
                [zeroOrMore] '.testng.Assert.fail'
                    [sequence] '.testng'
                        ['.'] '.'
                        [identifier] 'testng'
                    [sequence] '.Assert'
                        ['.'] '.'
                        [identifier] 'Assert'
                    [sequence] '.fail'
                        ['.'] '.'
                        [identifier] 'fail'
            [';'] ';\n\n'
        [importDeclaration] 'import org.testng.annotations.Test;\n\n\n\n'
            ['import'] 'import '
            [qualifiedIdentifier] 'org.testng.annotations.Test'
                [identifier] 'org'
                [zeroOrMore] '.testng.annotations.Test'
                    [sequence] '.testng'
                        ['.'] '.'
                        [identifier] 'testng'
                    [sequence] '.annotations'
                        ['.'] '.'
                        [identifier] 'annotations'
                    [sequence] '.Test'
                        ['.'] '.'
                        [identifier] 'Test'
            [';'] ';\n\n\n\n'
    [zeroOrMore] 'public class JavaTest {\n\n\n\n    @Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n}'
        [typeDeclaration] 'public class JavaTest {\n\n\n\n    @Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n}'
            [sequence] 'public class JavaTest {\n\n\n\n    @Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n}'
                [zeroOrMore] 'public '
                    [modifier] 'public '
                        [sequence] 'public '
                            [firstOf] 'public'
                                ["public"] 'public'
                            [optional] ' '
                                [spacing] ' '
                [firstOf] 'class JavaTest {\n\n\n\n    @Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n}'
                    [classDeclaration] 'class JavaTest {\n\n\n\n    @Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n}'
                        ['class'] 'class '
                        [identifier] 'JavaTest '
                        [classBody] '{\n\n\n\n    @Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n}'
                            ['{'] '{\n\n\n\n    '
                            [zeroOrMore] '@Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n'
                                [classBodyDeclaration] '@Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n'
                                    [sequence] '@Test\n\n    public void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n'
                                        [zeroOrMore] '@Test\n\n    public '
                                            [modifier] '@Test\n\n    '
                                                [annotation] '@Test\n\n    '
                                                    ['@'] '@'
                                                    [qualifiedIdentifier] 'Test\n\n    '
                                                        [identifier] 'Test\n\n    '
                                            [modifier] 'public '
                                                [sequence] 'public '
                                                    [firstOf] 'public'
                                                        ["public"] 'public'
                                                    [optional] ' '
                                                        [spacing] ' '
                                        [memberDecl] 'void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n'
                                            [sequence] 'void simpleJavaTest() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n'
                                                ['void'] 'void '
                                                [identifier] 'simpleJavaTest'
                                                [voidMethodDeclaratorRest] '() {\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n'
                                                    [formalParameters] '() '
                                                        ['('] '('
                                                        [')'] ') '
                                                    [firstOf] '{\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n'
                                                        [methodBody] '{\n\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    }\n\n\n\n'
                                                            ['{'] '{\n\n        '
                                                            [blockStatements] 'String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        Rule compilationUnit = parser.compilationUnit();\n\n        ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    '
                                                                [blockStatement] 'String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        '
                                                                    [localVariableDeclarationStatement] 'String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n\n        '
                                                                        [type] 'String '
                                                                            [firstOf] 'String '
                                                                                [classType] 'String '
                                                                                    [identifier] 'String '
                                                                        [variableDeclarators] 'testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                            [variableDeclarator] 'testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                [identifier] 'testSource '
                                                                                [optional] '= FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                    [sequence] '= FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                        ['='] '= '
                                                                                        [variableInitializer] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                            [expression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                [conditionalExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                    [conditionalOrExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                        [conditionalAndExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                            [inclusiveOrExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                [exclusiveOrExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                    [andExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                        [equalityExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                            [relationalExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                [shiftExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                    [additiveExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                        [multiplicativeExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                            [unaryExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                [sequence] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                    [primary] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                        [sequence] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                            [qualifiedIdentifier] 'FileUtils.readAllText'
                                                                                                                                                                [identifier] 'FileUtils'
                                                                                                                                                                [zeroOrMore] '.readAllText'
                                                                                                                                                                    [sequence] '.readAllText'
                                                                                                                                                                        ['.'] '.'
                                                                                                                                                                        [identifier] 'readAllText'
                                                                                                                                                            [optional] '("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                                [identifierSuffix] '("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                                    [arguments] '("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                                        ['('] '('
                                                                                                                                                                        [optional] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                            [sequence] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                [expression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                    [conditionalExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                        [conditionalOrExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                            [conditionalAndExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                [inclusiveOrExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                    [exclusiveOrExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                        [andExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                            [equalityExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                [relationalExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                    [shiftExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                        [additiveExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                            [multiplicativeExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                [unaryExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                    [sequence] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                        [primary] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                            [literal] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                                [firstOf] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                                    [stringLiteral] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                                [optional]
                                                                                                                                                                                                                                                    [spacing]
                                                                                                                                                                        [')'] ')'
                                                                        [';'] ';\n\n        '
                                                                [blockStatement] 'JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        '
                                                                    [localVariableDeclarationStatement] 'JavaParser parser = Parboiled.createParser(JavaParser.class);\n\n        '
                                                                        [type] 'JavaParser '
                                                                            [firstOf] 'JavaParser '
                                                                                [classType] 'JavaParser '
                                                                                    [identifier] 'JavaParser '
                                                                        [variableDeclarators] 'parser = Parboiled.createParser(JavaParser.class)'
                                                                            [variableDeclarator] 'parser = Parboiled.createParser(JavaParser.class)'
                                                                                [identifier] 'parser '
                                                                                [optional] '= Parboiled.createParser(JavaParser.class)'
                                                                                    [sequence] '= Parboiled.createParser(JavaParser.class)'
                                                                                        ['='] '= '
                                                                                        [variableInitializer] 'Parboiled.createParser(JavaParser.class)'
                                                                                            [expression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                [conditionalExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                    [conditionalOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                        [conditionalAndExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                            [inclusiveOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                [exclusiveOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                    [andExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                        [equalityExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                            [relationalExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                [shiftExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                    [additiveExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                        [multiplicativeExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                            [unaryExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                                [sequence] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                                    [primary] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                                        [sequence] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                                            [qualifiedIdentifier] 'Parboiled.createParser'
                                                                                                                                                                [identifier] 'Parboiled'
                                                                                                                                                                [zeroOrMore] '.createParser'
                                                                                                                                                                    [sequence] '.createParser'
                                                                                                                                                                        ['.'] '.'
                                                                                                                                                                        [identifier] 'createParser'
                                                                                                                                                            [optional] '(JavaParser.class)'
                                                                                                                                                                [identifierSuffix] '(JavaParser.class)'
                                                                                                                                                                    [arguments] '(JavaParser.class)'
                                                                                                                                                                        ['('] '('
                                                                                                                                                                        [optional] 'JavaParser.class'
                                                                                                                                                                            [sequence] 'JavaParser.class'
                                                                                                                                                                                [expression] 'JavaParser.class'
                                                                                                                                                                                    [conditionalExpression] 'JavaParser.class'
                                                                                                                                                                                        [conditionalOrExpression] 'JavaParser.class'
                                                                                                                                                                                            [conditionalAndExpression] 'JavaParser.class'
                                                                                                                                                                                                [inclusiveOrExpression] 'JavaParser.class'
                                                                                                                                                                                                    [exclusiveOrExpression] 'JavaParser.class'
                                                                                                                                                                                                        [andExpression] 'JavaParser.class'
                                                                                                                                                                                                            [equalityExpression] 'JavaParser.class'
                                                                                                                                                                                                                [relationalExpression] 'JavaParser.class'
                                                                                                                                                                                                                    [shiftExpression] 'JavaParser.class'
                                                                                                                                                                                                                        [additiveExpression] 'JavaParser.class'
                                                                                                                                                                                                                            [multiplicativeExpression] 'JavaParser.class'
                                                                                                                                                                                                                                [unaryExpression] 'JavaParser.class'
                                                                                                                                                                                                                                    [sequence] 'JavaParser.class'
                                                                                                                                                                                                                                        [primary] 'JavaParser.class'
                                                                                                                                                                                                                                            [sequence] 'JavaParser.class'
                                                                                                                                                                                                                                                [qualifiedIdentifier] 'JavaParser'
                                                                                                                                                                                                                                                    [identifier] 'JavaParser'
                                                                                                                                                                                                                                                [optional] '.class'
                                                                                                                                                                                                                                                    [identifierSuffix] '.class'
                                                                                                                                                                                                                                                        [sequence] '.class'
                                                                                                                                                                                                                                                            ['.'] '.'
                                                                                                                                                                                                                                                            [firstOf] 'class'
                                                                                                                                                                                                                                                                ['class'] 'class'
                                                                                                                                                                        [')'] ')'
                                                                        [';'] ';\n\n        '
                                                                [blockStatement] 'Rule compilationUnit = parser.compilationUnit();\n\n        '
                                                                    [localVariableDeclarationStatement] 'Rule compilationUnit = parser.compilationUnit();\n\n        '
                                                                        [type] 'Rule '
                                                                            [firstOf] 'Rule '
                                                                                [classType] 'Rule '
                                                                                    [identifier] 'Rule '
                                                                        [variableDeclarators] 'compilationUnit = parser.compilationUnit()'
                                                                            [variableDeclarator] 'compilationUnit = parser.compilationUnit()'
                                                                                [identifier] 'compilationUnit '
                                                                                [optional] '= parser.compilationUnit()'
                                                                                    [sequence] '= parser.compilationUnit()'
                                                                                        ['='] '= '
                                                                                        [variableInitializer] 'parser.compilationUnit()'
                                                                                            [expression] 'parser.compilationUnit()'
                                                                                                [conditionalExpression] 'parser.compilationUnit()'
                                                                                                    [conditionalOrExpression] 'parser.compilationUnit()'
                                                                                                        [conditionalAndExpression] 'parser.compilationUnit()'
                                                                                                            [inclusiveOrExpression] 'parser.compilationUnit()'
                                                                                                                [exclusiveOrExpression] 'parser.compilationUnit()'
                                                                                                                    [andExpression] 'parser.compilationUnit()'
                                                                                                                        [equalityExpression] 'parser.compilationUnit()'
                                                                                                                            [relationalExpression] 'parser.compilationUnit()'
                                                                                                                                [shiftExpression] 'parser.compilationUnit()'
                                                                                                                                    [additiveExpression] 'parser.compilationUnit()'
                                                                                                                                        [multiplicativeExpression] 'parser.compilationUnit()'
                                                                                                                                            [unaryExpression] 'parser.compilationUnit()'
                                                                                                                                                [sequence] 'parser.compilationUnit()'
                                                                                                                                                    [primary] 'parser.compilationUnit()'
                                                                                                                                                        [sequence] 'parser.compilationUnit()'
                                                                                                                                                            [qualifiedIdentifier] 'parser.compilationUnit'
                                                                                                                                                                [identifier] 'parser'
                                                                                                                                                                [zeroOrMore] '.compilationUnit'
                                                                                                                                                                    [sequence] '.compilationUnit'
                                                                                                                                                                        ['.'] '.'
                                                                                                                                                                        [identifier] 'compilationUnit'
                                                                                                                                                            [optional] '()'
                                                                                                                                                                [identifierSuffix] '()'
                                                                                                                                                                    [arguments] '()'
                                                                                                                                                                        ['('] '('
                                                                                                                                                                        [')'] ')'
                                                                        [';'] ';\n\n        '
                                                                [blockStatement] 'ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        '
                                                                    [localVariableDeclarationStatement] 'ParsingResult<Object> parsingResult = parser.parse(compilationUnit, testSource);\n\n        '
                                                                        [type] 'ParsingResult<Object> '
                                                                            [firstOf] 'ParsingResult<Object> '
                                                                                [classType] 'ParsingResult<Object> '
                                                                                    [identifier] 'ParsingResult'
                                                                                    [optional] '<Object> '
                                                                                        [typeArguments] '<Object> '
                                                                                            ['<'] '<'
                                                                                            [typeArgument] 'Object'
                                                                                                [referenceType] 'Object'
                                                                                                    [sequence] 'Object'
                                                                                                        [classType] 'Object'
                                                                                                            [identifier] 'Object'
                                                                                            ['>'] '> '
                                                                        [variableDeclarators] 'parsingResult = parser.parse(compilationUnit, testSource)'
                                                                            [variableDeclarator] 'parsingResult = parser.parse(compilationUnit, testSource)'
                                                                                [identifier] 'parsingResult '
                                                                                [optional] '= parser.parse(compilationUnit, testSource)'
                                                                                    [sequence] '= parser.parse(compilationUnit, testSource)'
                                                                                        ['='] '= '
                                                                                        [variableInitializer] 'parser.parse(compilationUnit, testSource)'
                                                                                            [expression] 'parser.parse(compilationUnit, testSource)'
                                                                                                [conditionalExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                    [conditionalOrExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                        [conditionalAndExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                            [inclusiveOrExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                [exclusiveOrExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                    [andExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                        [equalityExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                            [relationalExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                                [shiftExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                                    [additiveExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                                        [multiplicativeExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                                            [unaryExpression] 'parser.parse(compilationUnit, testSource)'
                                                                                                                                                [sequence] 'parser.parse(compilationUnit, testSource)'
                                                                                                                                                    [primary] 'parser.parse(compilationUnit, testSource)'
                                                                                                                                                        [sequence] 'parser.parse(compilationUnit, testSource)'
                                                                                                                                                            [qualifiedIdentifier] 'parser.parse'
                                                                                                                                                                [identifier] 'parser'
                                                                                                                                                                [zeroOrMore] '.parse'
                                                                                                                                                                    [sequence] '.parse'
                                                                                                                                                                        ['.'] '.'
                                                                                                                                                                        [identifier] 'parse'
                                                                                                                                                            [optional] '(compilationUnit, testSource)'
                                                                                                                                                                [identifierSuffix] '(compilationUnit, testSource)'
                                                                                                                                                                    [arguments] '(compilationUnit, testSource)'
                                                                                                                                                                        ['('] '('
                                                                                                                                                                        [optional] 'compilationUnit, testSource'
                                                                                                                                                                            [sequence] 'compilationUnit, testSource'
                                                                                                                                                                                [expression] 'compilationUnit'
                                                                                                                                                                                    [conditionalExpression] 'compilationUnit'
                                                                                                                                                                                        [conditionalOrExpression] 'compilationUnit'
                                                                                                                                                                                            [conditionalAndExpression] 'compilationUnit'
                                                                                                                                                                                                [inclusiveOrExpression] 'compilationUnit'
                                                                                                                                                                                                    [exclusiveOrExpression] 'compilationUnit'
                                                                                                                                                                                                        [andExpression] 'compilationUnit'
                                                                                                                                                                                                            [equalityExpression] 'compilationUnit'
                                                                                                                                                                                                                [relationalExpression] 'compilationUnit'
                                                                                                                                                                                                                    [shiftExpression] 'compilationUnit'
                                                                                                                                                                                                                        [additiveExpression] 'compilationUnit'
                                                                                                                                                                                                                            [multiplicativeExpression] 'compilationUnit'
                                                                                                                                                                                                                                [unaryExpression] 'compilationUnit'
                                                                                                                                                                                                                                    [sequence] 'compilationUnit'
                                                                                                                                                                                                                                        [primary] 'compilationUnit'
                                                                                                                                                                                                                                            [sequence] 'compilationUnit'
                                                                                                                                                                                                                                                [qualifiedIdentifier] 'compilationUnit'
                                                                                                                                                                                                                                                    [identifier] 'compilationUnit'
                                                                                                                                                                                [zeroOrMore] ', testSource'
                                                                                                                                                                                    [sequence] ', testSource'
                                                                                                                                                                                        [','] ', '
                                                                                                                                                                                        [expression] 'testSource'
                                                                                                                                                                                            [conditionalExpression] 'testSource'
                                                                                                                                                                                                [conditionalOrExpression] 'testSource'
                                                                                                                                                                                                    [conditionalAndExpression] 'testSource'
                                                                                                                                                                                                        [inclusiveOrExpression] 'testSource'
                                                                                                                                                                                                            [exclusiveOrExpression] 'testSource'
                                                                                                                                                                                                                [andExpression] 'testSource'
                                                                                                                                                                                                                    [equalityExpression] 'testSource'
                                                                                                                                                                                                                        [relationalExpression] 'testSource'
                                                                                                                                                                                                                            [shiftExpression] 'testSource'
                                                                                                                                                                                                                                [additiveExpression] 'testSource'
                                                                                                                                                                                                                                    [multiplicativeExpression] 'testSource'
                                                                                                                                                                                                                                        [unaryExpression] 'testSource'
                                                                                                                                                                                                                                            [sequence] 'testSource'
                                                                                                                                                                                                                                                [primary] 'testSource'
                                                                                                                                                                                                                                                    [sequence] 'testSource'
                                                                                                                                                                                                                                                        [qualifiedIdentifier] 'testSource'
                                                                                                                                                                                                                                                            [identifier] 'testSource'
                                                                                                                                                                        [')'] ')'
                                                                        [';'] ';\n\n        '
                                                                [blockStatement] 'if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        '
                                                                    [statement] 'if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        '
                                                                        [sequence] 'if (parsingResult.hasErrors()) {\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        '
                                                                            ['if'] 'if '
                                                                            [parExpression] '(parsingResult.hasErrors()) '
                                                                                ['('] '('
                                                                                [expression] 'parsingResult.hasErrors()'
                                                                                    [conditionalExpression] 'parsingResult.hasErrors()'
                                                                                        [conditionalOrExpression] 'parsingResult.hasErrors()'
                                                                                            [conditionalAndExpression] 'parsingResult.hasErrors()'
                                                                                                [inclusiveOrExpression] 'parsingResult.hasErrors()'
                                                                                                    [exclusiveOrExpression] 'parsingResult.hasErrors()'
                                                                                                        [andExpression] 'parsingResult.hasErrors()'
                                                                                                            [equalityExpression] 'parsingResult.hasErrors()'
                                                                                                                [relationalExpression] 'parsingResult.hasErrors()'
                                                                                                                    [shiftExpression] 'parsingResult.hasErrors()'
                                                                                                                        [additiveExpression] 'parsingResult.hasErrors()'
                                                                                                                            [multiplicativeExpression] 'parsingResult.hasErrors()'
                                                                                                                                [unaryExpression] 'parsingResult.hasErrors()'
                                                                                                                                    [sequence] 'parsingResult.hasErrors()'
                                                                                                                                        [primary] 'parsingResult.hasErrors()'
                                                                                                                                            [sequence] 'parsingResult.hasErrors()'
                                                                                                                                                [qualifiedIdentifier] 'parsingResult.hasErrors'
                                                                                                                                                    [identifier] 'parsingResult'
                                                                                                                                                    [zeroOrMore] '.hasErrors'
                                                                                                                                                        [sequence] '.hasErrors'
                                                                                                                                                            ['.'] '.'
                                                                                                                                                            [identifier] 'hasErrors'
                                                                                                                                                [optional] '()'
                                                                                                                                                    [identifierSuffix] '()'
                                                                                                                                                        [arguments] '()'
                                                                                                                                                            ['('] '('
                                                                                                                                                            [')'] ')'
                                                                                [')'] ') '
                                                                            [statement] '{\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        '
                                                                                [block] '{\n\n            fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        }\n\n        '
                                                                                    ['{'] '{\n\n            '
                                                                                    [blockStatements] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        '
                                                                                        [blockStatement] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        '
                                                                                            [statement] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        '
                                                                                                [sequence] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            );\n\n        '
                                                                                                    [statementExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                        [conditionalExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                            [conditionalOrExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                [conditionalAndExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                    [inclusiveOrExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                        [exclusiveOrExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                            [andExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                [equalityExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                    [relationalExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                        [shiftExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                            [additiveExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                [multiplicativeExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                    [unaryExpression] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                        [sequence] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                            [primary] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                                [sequence] 'fail("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                                    [qualifiedIdentifier] 'fail'
                                                                                                                                                                        [identifier] 'fail'
                                                                                                                                                                    [optional] '("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                                        [identifierSuffix] '("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                                            [arguments] '("\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            )'
                                                                                                                                                                                ['('] '('
                                                                                                                                                                                [optional] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                    [sequence] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                        [expression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                            [conditionalExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                [conditionalOrExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                    [conditionalAndExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                        [inclusiveOrExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                            [exclusiveOrExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                [andExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                    [equalityExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                        [relationalExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                            [shiftExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                [additiveExpression] '"\n--- ParseErrors ---\n" +\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                    [multiplicativeExpression] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                        [unaryExpression] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                            [sequence] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                                [primary] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                                    [literal] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                                        [firstOf] '"\n--- ParseErrors ---\n"'
                                                                                                                                                                                                                                                            [stringLiteral] '"\n--- ParseErrors ---\n"'
                                                                                                                                                                                                                                                        [optional] ' '
                                                                                                                                                                                                                                                            [spacing] ' '
                                                                                                                                                                                                                                    [zeroOrMore] '+\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n\n                    "\n--- ParseTree ---\n" +\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                        [sequence] '+\n\n                    StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                            [firstOf] '+\n\n                    '
                                                                                                                                                                                                                                                ['+'] '+\n\n                    '
                                                                                                                                                                                                                                            [multiplicativeExpression] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                [unaryExpression] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                    [sequence] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                        [primary] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                            [sequence] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                                [qualifiedIdentifier] 'StringUtils.join'
                                                                                                                                                                                                                                                                    [identifier] 'StringUtils'
                                                                                                                                                                                                                                                                    [zeroOrMore] '.join'
                                                                                                                                                                                                                                                                        [sequence] '.join'
                                                                                                                                                                                                                                                                            ['.'] '.'
                                                                                                                                                                                                                                                                            [identifier] 'join'
                                                                                                                                                                                                                                                                [optional] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                                    [identifierSuffix] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                                        [arguments] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                                            ['('] '('
                                                                                                                                                                                                                                                                            [optional] 'parsingResult.parseErrors, "---\n"'
                                                                                                                                                                                                                                                                                [sequence] 'parsingResult.parseErrors, "---\n"'
                                                                                                                                                                                                                                                                                    [expression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                        [conditionalExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                            [conditionalOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                [conditionalAndExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                    [inclusiveOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                        [exclusiveOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                            [andExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                [equalityExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                    [relationalExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                        [shiftExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                            [additiveExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                [multiplicativeExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                    [unaryExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                        [sequence] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                            [primary] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                                [sequence] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                                    [qualifiedIdentifier] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                                        [identifier] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                                        [zeroOrMore] '.parseErrors'
                                                                                                                                                                                                                                                                                                                                                            [sequence] '.parseErrors'
                                                                                                                                                                                                                                                                                                                                                                ['.'] '.'
                                                                                                                                                                                                                                                                                                                                                                [identifier] 'parseErrors'
                                                                                                                                                                                                                                                                                    [zeroOrMore] ', "---\n"'
                                                                                                                                                                                                                                                                                        [sequence] ', "---\n"'
                                                                                                                                                                                                                                                                                            [','] ', '
                                                                                                                                                                                                                                                                                            [expression] '"---\n"'
                                                                                                                                                                                                                                                                                                [conditionalExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                    [conditionalOrExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                        [conditionalAndExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                            [inclusiveOrExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                [exclusiveOrExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                    [andExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                        [equalityExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                            [relationalExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                [shiftExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                    [additiveExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                        [multiplicativeExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                            [unaryExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                [sequence] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                    [primary] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                        [literal] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                            [firstOf] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                                [stringLiteral] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                            [optional]
                                                                                                                                                                                                                                                                                                                                                                [spacing]
                                                                                                                                                                                                                                                                            [')'] ') '
                                                                                                                                                                                                                                        [sequence] '+\n\n                    "\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                            [firstOf] '+\n\n                    '
                                                                                                                                                                                                                                                ['+'] '+\n\n                    '
                                                                                                                                                                                                                                            [multiplicativeExpression] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                [unaryExpression] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                    [sequence] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                        [primary] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                            [literal] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                                [firstOf] '"\n--- ParseTree ---\n"'
                                                                                                                                                                                                                                                                    [stringLiteral] '"\n--- ParseTree ---\n"'
                                                                                                                                                                                                                                                                [optional] ' '
                                                                                                                                                                                                                                                                    [spacing] ' '
                                                                                                                                                                                                                                        [sequence] '+\n\n                    printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                            [firstOf] '+\n\n                    '
                                                                                                                                                                                                                                                ['+'] '+\n\n                    '
                                                                                                                                                                                                                                            [multiplicativeExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                                [unaryExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                                    [sequence] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                                        [primary] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                                            [sequence] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                                                [qualifiedIdentifier] 'printNodeTree'
                                                                                                                                                                                                                                                                    [identifier] 'printNodeTree'
                                                                                                                                                                                                                                                                [optional] '(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                                                    [identifierSuffix] '(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                                                        [arguments] '(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)\n\n            '
                                                                                                                                                                                                                                                                            ['('] '('
                                                                                                                                                                                                                                                                            [optional] 'parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                [sequence] 'parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                    [expression] 'parsingResult'
                                                                                                                                                                                                                                                                                        [conditionalExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                            [conditionalOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                [conditionalAndExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                    [inclusiveOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                        [exclusiveOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                            [andExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                [equalityExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                    [relationalExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                        [shiftExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                            [additiveExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                [multiplicativeExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                    [unaryExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                        [sequence] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                            [primary] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                                [sequence] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                                    [qualifiedIdentifier] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                                        [identifier] 'parsingResult'
                                                                                                                                                                                                                                                                                    [zeroOrMore] ', Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                        [sequence] ', Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                            [','] ', '
                                                                                                                                                                                                                                                                                            [expression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                [conditionalExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                    [conditionalOrExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                        [conditionalAndExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                            [inclusiveOrExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                [exclusiveOrExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                    [andExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                        [equalityExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                            [relationalExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                [shiftExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                    [additiveExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                        [multiplicativeExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                            [unaryExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                [sequence] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                    [primary] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                        [sequence] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                            [qualifiedIdentifier] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                                [identifier] 'Filter'
                                                                                                                                                                                                                                                                                                                                                                [zeroOrMore] '.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                                    [sequence] '.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                                        ['.'] '.'
                                                                                                                                                                                                                                                                                                                                                                        [identifier] 'SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                            [')'] ')\n\n            '
                                                                                                                                                                                [')'] ')'
                                                                                                    [';'] ';\n\n        '
                                                                                    ['}'] '}\n\n        '
                                                                [blockStatement] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    '
                                                                    [statement] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    '
                                                                        [sequence] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        );\n\n    '
                                                                            [statementExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                [conditionalExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                    [conditionalOrExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                        [conditionalAndExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                            [inclusiveOrExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                [exclusiveOrExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                    [andExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                        [equalityExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                            [relationalExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                [shiftExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                    [additiveExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                        [multiplicativeExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                            [unaryExpression] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                                [sequence] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                                    [primary] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                                        [sequence] 'assertEqualsMultiline(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                                            [qualifiedIdentifier] 'assertEqualsMultiline'
                                                                                                                                                [identifier] 'assertEqualsMultiline'
                                                                                                                                            [optional] '(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                                                [identifierSuffix] '(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                                                    [arguments] '(\n\n                printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        )'
                                                                                                                                                        ['('] '(\n\n                '
                                                                                                                                                        [optional] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                            [sequence] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores),\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                [expression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                    [conditionalExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                        [conditionalOrExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                            [conditionalAndExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                [inclusiveOrExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                    [exclusiveOrExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                        [andExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                            [equalityExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                [relationalExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                    [shiftExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                        [additiveExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                            [multiplicativeExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                                [unaryExpression] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                                    [sequence] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                                        [primary] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                                            [sequence] 'printNodeTree(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                                                [qualifiedIdentifier] 'printNodeTree'
                                                                                                                                                                                                                                    [identifier] 'printNodeTree'
                                                                                                                                                                                                                                [optional] '(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                                                    [identifierSuffix] '(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                                                        [arguments] '(parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores)'
                                                                                                                                                                                                                                            ['('] '('
                                                                                                                                                                                                                                            [optional] 'parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                [sequence] 'parsingResult, Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                    [expression] 'parsingResult'
                                                                                                                                                                                                                                                        [conditionalExpression] 'parsingResult'
                                                                                                                                                                                                                                                            [conditionalOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                [conditionalAndExpression] 'parsingResult'
                                                                                                                                                                                                                                                                    [inclusiveOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                        [exclusiveOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                            [andExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                [equalityExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                    [relationalExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                        [shiftExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                            [additiveExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                [multiplicativeExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                    [unaryExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                        [sequence] 'parsingResult'
                                                                                                                                                                                                                                                                                                            [primary] 'parsingResult'
                                                                                                                                                                                                                                                                                                                [sequence] 'parsingResult'
                                                                                                                                                                                                                                                                                                                    [qualifiedIdentifier] 'parsingResult'
                                                                                                                                                                                                                                                                                                                        [identifier] 'parsingResult'
                                                                                                                                                                                                                                                    [zeroOrMore] ', Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                        [sequence] ', Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                            [','] ', '
                                                                                                                                                                                                                                                            [expression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                [conditionalExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                    [conditionalOrExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                        [conditionalAndExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                            [inclusiveOrExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                [exclusiveOrExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                    [andExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                        [equalityExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                            [relationalExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                [shiftExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                    [additiveExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                        [multiplicativeExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                            [unaryExpression] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                [sequence] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                    [primary] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                        [sequence] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                            [qualifiedIdentifier] 'Filter.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                [identifier] 'Filter'
                                                                                                                                                                                                                                                                                                                                [zeroOrMore] '.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                    [sequence] '.SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                        ['.'] '.'
                                                                                                                                                                                                                                                                                                                                        [identifier] 'SkipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                            [')'] ')'
                                                                                                                                                                [zeroOrMore] ',\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                    [sequence] ',\n\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                        [','] ',\n\n                '
                                                                                                                                                                        [expression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                            [conditionalExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                [conditionalOrExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                    [conditionalAndExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                        [inclusiveOrExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                            [exclusiveOrExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                [andExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                    [equalityExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                        [relationalExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                            [shiftExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                [additiveExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                    [multiplicativeExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                        [unaryExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                            [sequence] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                                [primary] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                                    [sequence] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                                        [qualifiedIdentifier] 'FileUtils.readAllTextFromResource'
                                                                                                                                                                                                                                            [identifier] 'FileUtils'
                                                                                                                                                                                                                                            [zeroOrMore] '.readAllTextFromResource'
                                                                                                                                                                                                                                                [sequence] '.readAllTextFromResource'
                                                                                                                                                                                                                                                    ['.'] '.'
                                                                                                                                                                                                                                                    [identifier] 'readAllTextFromResource'
                                                                                                                                                                                                                                        [optional] '("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                                            [identifierSuffix] '("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                                                [arguments] '("res/SimpleJavaTestParseTree.test")\n\n        '
                                                                                                                                                                                                                                                    ['('] '('
                                                                                                                                                                                                                                                    [optional] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                        [sequence] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                            [expression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                [conditionalExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                    [conditionalOrExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                        [conditionalAndExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                            [inclusiveOrExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                [exclusiveOrExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                    [andExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                        [equalityExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                            [relationalExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                [shiftExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                    [additiveExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                        [multiplicativeExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                            [unaryExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                [sequence] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                    [primary] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                        [literal] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                            [firstOf] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                                [stringLiteral] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                            [optional]
                                                                                                                                                                                                                                                                                                                                [spacing]
                                                                                                                                                                                                                                                    [')'] ')\n\n        '
                                                                                                                                                        [')'] ')'
                                                                            [';'] ';\n\n    '
                                                            ['}'] '}\n\n\n\n'
                            ['}'] '}'
    [EOI]
