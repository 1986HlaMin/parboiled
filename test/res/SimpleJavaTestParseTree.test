[CompilationUnit] '/*\n * Copyright (C) 2009-2010 Mathias Doenitz\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.parboiled.examples;\n\nimport org.parboiled.Parboiled;\nimport org.parboiled.RecoveringParseRunner;\nimport org.parboiled.Rule;\nimport org.parboiled.common.StringUtils;\nimport org.parboiled.examples.java.JavaParser;\nimport org.parboiled.support.ParsingResult;\nimport org.parboiled.test.FileUtils;\nimport org.parboiled.trees.Filters;\nimport org.testng.annotations.Test;\n\nimport static org.parboiled.support.ParseTreeUtils.printNodeTree;\nimport static org.parboiled.test.TestUtils.assertEqualsMultiline;\nimport static org.testng.Assert.fail;\n\npublic class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
    [Optional] 'package org.parboiled.examples;\n\n'
        [PackageDeclaration] 'package org.parboiled.examples;\n\n'
            [Sequence] 'package org.parboiled.examples;\n\n'
                [QualifiedIdentifier] 'org.parboiled.examples'
                    [Identifier] 'org'
                    [ZeroOrMore] '.parboiled.examples'
                        [Sequence] '.parboiled'
                            [Identifier] 'parboiled'
                        [Sequence] '.examples'
                            [Identifier] 'examples'
    [ZeroOrMore] 'import org.parboiled.Parboiled;\nimport org.parboiled.RecoveringParseRunner;\nimport org.parboiled.Rule;\nimport org.parboiled.common.StringUtils;\nimport org.parboiled.examples.java.JavaParser;\nimport org.parboiled.support.ParsingResult;\nimport org.parboiled.test.FileUtils;\nimport org.parboiled.trees.Filters;\nimport org.testng.annotations.Test;\n\nimport static org.parboiled.support.ParseTreeUtils.printNodeTree;\nimport static org.parboiled.test.TestUtils.assertEqualsMultiline;\nimport static org.testng.Assert.fail;\n\n'
        [ImportDeclaration] 'import org.parboiled.Parboiled;\n'
            [QualifiedIdentifier] 'org.parboiled.Parboiled'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.Parboiled'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.Parboiled'
                        [Identifier] 'Parboiled'
        [ImportDeclaration] 'import org.parboiled.RecoveringParseRunner;\n'
            [QualifiedIdentifier] 'org.parboiled.RecoveringParseRunner'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.RecoveringParseRunner'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.RecoveringParseRunner'
                        [Identifier] 'RecoveringParseRunner'
        [ImportDeclaration] 'import org.parboiled.Rule;\n'
            [QualifiedIdentifier] 'org.parboiled.Rule'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.Rule'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.Rule'
                        [Identifier] 'Rule'
        [ImportDeclaration] 'import org.parboiled.common.StringUtils;\n'
            [QualifiedIdentifier] 'org.parboiled.common.StringUtils'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.common.StringUtils'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.common'
                        [Identifier] 'common'
                    [Sequence] '.StringUtils'
                        [Identifier] 'StringUtils'
        [ImportDeclaration] 'import org.parboiled.examples.java.JavaParser;\n'
            [QualifiedIdentifier] 'org.parboiled.examples.java.JavaParser'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.examples.java.JavaParser'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.examples'
                        [Identifier] 'examples'
                    [Sequence] '.java'
                        [Identifier] 'java'
                    [Sequence] '.JavaParser'
                        [Identifier] 'JavaParser'
        [ImportDeclaration] 'import org.parboiled.support.ParsingResult;\n'
            [QualifiedIdentifier] 'org.parboiled.support.ParsingResult'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.support.ParsingResult'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.support'
                        [Identifier] 'support'
                    [Sequence] '.ParsingResult'
                        [Identifier] 'ParsingResult'
        [ImportDeclaration] 'import org.parboiled.test.FileUtils;\n'
            [QualifiedIdentifier] 'org.parboiled.test.FileUtils'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.test.FileUtils'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.test'
                        [Identifier] 'test'
                    [Sequence] '.FileUtils'
                        [Identifier] 'FileUtils'
        [ImportDeclaration] 'import org.parboiled.trees.Filters;\n'
            [QualifiedIdentifier] 'org.parboiled.trees.Filters'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.trees.Filters'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.trees'
                        [Identifier] 'trees'
                    [Sequence] '.Filters'
                        [Identifier] 'Filters'
        [ImportDeclaration] 'import org.testng.annotations.Test;\n\n'
            [QualifiedIdentifier] 'org.testng.annotations.Test'
                [Identifier] 'org'
                [ZeroOrMore] '.testng.annotations.Test'
                    [Sequence] '.testng'
                        [Identifier] 'testng'
                    [Sequence] '.annotations'
                        [Identifier] 'annotations'
                    [Sequence] '.Test'
                        [Identifier] 'Test'
        [ImportDeclaration] 'import static org.parboiled.support.ParseTreeUtils.printNodeTree;\n'
            [Optional] 'static '
            [QualifiedIdentifier] 'org.parboiled.support.ParseTreeUtils.printNodeTree'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.support.ParseTreeUtils.printNodeTree'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.support'
                        [Identifier] 'support'
                    [Sequence] '.ParseTreeUtils'
                        [Identifier] 'ParseTreeUtils'
                    [Sequence] '.printNodeTree'
                        [Identifier] 'printNodeTree'
        [ImportDeclaration] 'import static org.parboiled.test.TestUtils.assertEqualsMultiline;\n'
            [Optional] 'static '
            [QualifiedIdentifier] 'org.parboiled.test.TestUtils.assertEqualsMultiline'
                [Identifier] 'org'
                [ZeroOrMore] '.parboiled.test.TestUtils.assertEqualsMultiline'
                    [Sequence] '.parboiled'
                        [Identifier] 'parboiled'
                    [Sequence] '.test'
                        [Identifier] 'test'
                    [Sequence] '.TestUtils'
                        [Identifier] 'TestUtils'
                    [Sequence] '.assertEqualsMultiline'
                        [Identifier] 'assertEqualsMultiline'
        [ImportDeclaration] 'import static org.testng.Assert.fail;\n\n'
            [Optional] 'static '
            [QualifiedIdentifier] 'org.testng.Assert.fail'
                [Identifier] 'org'
                [ZeroOrMore] '.testng.Assert.fail'
                    [Sequence] '.testng'
                        [Identifier] 'testng'
                    [Sequence] '.Assert'
                        [Identifier] 'Assert'
                    [Sequence] '.fail'
                        [Identifier] 'fail'
    [ZeroOrMore] 'public class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
        [TypeDeclaration] 'public class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
            [Sequence] 'public class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
                [ZeroOrMore] 'public '
                    [Modifier] 'public '
                        [Sequence] 'public '
                            [FirstOf] 'public'
                                ["public"] 'public'
                [FirstOf] 'class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
                    [ClassDeclaration] 'class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
                        [Identifier] 'JavaTest '
                        [ClassBody] '{\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
                            [ZeroOrMore] '@Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                                [ClassBodyDeclaration] '@Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                                    [Sequence] '@Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                                        [ZeroOrMore] '@Test\n    public '
                                            [Modifier] '@Test\n    '
                                                [Annotation] '@Test\n    '
                                                    [QualifiedIdentifier] 'Test\n    '
                                                        [Identifier] 'Test\n    '
                                            [Modifier] 'public '
                                                [Sequence] 'public '
                                                    [FirstOf] 'public'
                                                        ["public"] 'public'
                                        [MemberDecl] 'void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                                            [Sequence] 'void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                                                [Identifier] 'simpleJavaTest'
                                                [VoidMethodDeclaratorRest] '() {\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                                                    [FormalParameters] '() '
                                                    [FirstOf] '{\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                                                        [MethodBody] '{\n        String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                                                            [BlockStatements] 'String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    '
                                                                [BlockStatement] 'String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        '
                                                                    [LocalVariableDeclarationStatement] 'String testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java");\n        '
                                                                        [Type] 'String '
                                                                            [FirstOf] 'String '
                                                                                [ClassType] 'String '
                                                                                    [Identifier] 'String '
                                                                        [VariableDeclarators] 'testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                            [VariableDeclarator] 'testSource = FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                [Identifier] 'testSource '
                                                                                [Optional] '= FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                    [Sequence] '= FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                        [VariableInitializer] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                            [Expression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                [ConditionalExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                    [ConditionalOrExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                        [ConditionalAndExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                            [InclusiveOrExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                [ExclusiveOrExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                    [AndExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                        [EqualityExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                            [RelationalExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                [ShiftExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                    [AdditiveExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                        [MultiplicativeExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                            [UnaryExpression] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                [Sequence] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                    [Primary] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                        [Sequence] 'FileUtils.readAllText("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                            [QualifiedIdentifier] 'FileUtils.readAllText'
                                                                                                                                                                [Identifier] 'FileUtils'
                                                                                                                                                                [ZeroOrMore] '.readAllText'
                                                                                                                                                                    [Sequence] '.readAllText'
                                                                                                                                                                        [Identifier] 'readAllText'
                                                                                                                                                            [Optional] '("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                                [IdentifierSuffix] '("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                                    [Arguments] '("test/org/parboiled/examples/JavaTest.java")'
                                                                                                                                                                        [Optional] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                            [Sequence] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                [Expression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                    [ConditionalExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                        [ConditionalOrExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                            [ConditionalAndExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                [InclusiveOrExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                    [ExclusiveOrExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                        [AndExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                            [EqualityExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                [RelationalExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                    [ShiftExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                        [AdditiveExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                            [MultiplicativeExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                [UnaryExpression] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                    [Sequence] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                        [Primary] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                            [Literal] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                                [FirstOf] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                                    [StringLiteral] '"test/org/parboiled/examples/JavaTest.java"'
                                                                                                                                                                                                                                                        [ZeroOrMore] 'test/org/parboiled/examples/JavaTest.java'
                                                                [BlockStatement] 'JavaParser parser = Parboiled.createParser(JavaParser.class);\n        '
                                                                    [LocalVariableDeclarationStatement] 'JavaParser parser = Parboiled.createParser(JavaParser.class);\n        '
                                                                        [Type] 'JavaParser '
                                                                            [FirstOf] 'JavaParser '
                                                                                [ClassType] 'JavaParser '
                                                                                    [Identifier] 'JavaParser '
                                                                        [VariableDeclarators] 'parser = Parboiled.createParser(JavaParser.class)'
                                                                            [VariableDeclarator] 'parser = Parboiled.createParser(JavaParser.class)'
                                                                                [Identifier] 'parser '
                                                                                [Optional] '= Parboiled.createParser(JavaParser.class)'
                                                                                    [Sequence] '= Parboiled.createParser(JavaParser.class)'
                                                                                        [VariableInitializer] 'Parboiled.createParser(JavaParser.class)'
                                                                                            [Expression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                [ConditionalExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                    [ConditionalOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                        [ConditionalAndExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                            [InclusiveOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                [ExclusiveOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                    [AndExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                        [EqualityExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                            [RelationalExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                [ShiftExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                    [AdditiveExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                        [MultiplicativeExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                            [UnaryExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                                [Sequence] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                                    [Primary] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                                        [Sequence] 'Parboiled.createParser(JavaParser.class)'
                                                                                                                                                            [QualifiedIdentifier] 'Parboiled.createParser'
                                                                                                                                                                [Identifier] 'Parboiled'
                                                                                                                                                                [ZeroOrMore] '.createParser'
                                                                                                                                                                    [Sequence] '.createParser'
                                                                                                                                                                        [Identifier] 'createParser'
                                                                                                                                                            [Optional] '(JavaParser.class)'
                                                                                                                                                                [IdentifierSuffix] '(JavaParser.class)'
                                                                                                                                                                    [Arguments] '(JavaParser.class)'
                                                                                                                                                                        [Optional] 'JavaParser.class'
                                                                                                                                                                            [Sequence] 'JavaParser.class'
                                                                                                                                                                                [Expression] 'JavaParser.class'
                                                                                                                                                                                    [ConditionalExpression] 'JavaParser.class'
                                                                                                                                                                                        [ConditionalOrExpression] 'JavaParser.class'
                                                                                                                                                                                            [ConditionalAndExpression] 'JavaParser.class'
                                                                                                                                                                                                [InclusiveOrExpression] 'JavaParser.class'
                                                                                                                                                                                                    [ExclusiveOrExpression] 'JavaParser.class'
                                                                                                                                                                                                        [AndExpression] 'JavaParser.class'
                                                                                                                                                                                                            [EqualityExpression] 'JavaParser.class'
                                                                                                                                                                                                                [RelationalExpression] 'JavaParser.class'
                                                                                                                                                                                                                    [ShiftExpression] 'JavaParser.class'
                                                                                                                                                                                                                        [AdditiveExpression] 'JavaParser.class'
                                                                                                                                                                                                                            [MultiplicativeExpression] 'JavaParser.class'
                                                                                                                                                                                                                                [UnaryExpression] 'JavaParser.class'
                                                                                                                                                                                                                                    [Sequence] 'JavaParser.class'
                                                                                                                                                                                                                                        [Primary] 'JavaParser.class'
                                                                                                                                                                                                                                            [Sequence] 'JavaParser.class'
                                                                                                                                                                                                                                                [QualifiedIdentifier] 'JavaParser'
                                                                                                                                                                                                                                                    [Identifier] 'JavaParser'
                                                                                                                                                                                                                                                [Optional] '.class'
                                                                                                                                                                                                                                                    [IdentifierSuffix] '.class'
                                                                                                                                                                                                                                                        [Sequence] '.class'
                                                                                                                                                                                                                                                            [FirstOf] 'class'
                                                                [BlockStatement] 'Rule compilationUnit = parser.CompilationUnit();\n        '
                                                                    [LocalVariableDeclarationStatement] 'Rule compilationUnit = parser.CompilationUnit();\n        '
                                                                        [Type] 'Rule '
                                                                            [FirstOf] 'Rule '
                                                                                [ClassType] 'Rule '
                                                                                    [Identifier] 'Rule '
                                                                        [VariableDeclarators] 'compilationUnit = parser.CompilationUnit()'
                                                                            [VariableDeclarator] 'compilationUnit = parser.CompilationUnit()'
                                                                                [Identifier] 'compilationUnit '
                                                                                [Optional] '= parser.CompilationUnit()'
                                                                                    [Sequence] '= parser.CompilationUnit()'
                                                                                        [VariableInitializer] 'parser.CompilationUnit()'
                                                                                            [Expression] 'parser.CompilationUnit()'
                                                                                                [ConditionalExpression] 'parser.CompilationUnit()'
                                                                                                    [ConditionalOrExpression] 'parser.CompilationUnit()'
                                                                                                        [ConditionalAndExpression] 'parser.CompilationUnit()'
                                                                                                            [InclusiveOrExpression] 'parser.CompilationUnit()'
                                                                                                                [ExclusiveOrExpression] 'parser.CompilationUnit()'
                                                                                                                    [AndExpression] 'parser.CompilationUnit()'
                                                                                                                        [EqualityExpression] 'parser.CompilationUnit()'
                                                                                                                            [RelationalExpression] 'parser.CompilationUnit()'
                                                                                                                                [ShiftExpression] 'parser.CompilationUnit()'
                                                                                                                                    [AdditiveExpression] 'parser.CompilationUnit()'
                                                                                                                                        [MultiplicativeExpression] 'parser.CompilationUnit()'
                                                                                                                                            [UnaryExpression] 'parser.CompilationUnit()'
                                                                                                                                                [Sequence] 'parser.CompilationUnit()'
                                                                                                                                                    [Primary] 'parser.CompilationUnit()'
                                                                                                                                                        [Sequence] 'parser.CompilationUnit()'
                                                                                                                                                            [QualifiedIdentifier] 'parser.CompilationUnit'
                                                                                                                                                                [Identifier] 'parser'
                                                                                                                                                                [ZeroOrMore] '.CompilationUnit'
                                                                                                                                                                    [Sequence] '.CompilationUnit'
                                                                                                                                                                        [Identifier] 'CompilationUnit'
                                                                                                                                                            [Optional] '()'
                                                                                                                                                                [IdentifierSuffix] '()'
                                                                                                                                                                    [Arguments] '()'
                                                                [BlockStatement] 'ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        '
                                                                    [LocalVariableDeclarationStatement] 'ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        '
                                                                        [Type] 'ParsingResult<Object> '
                                                                            [FirstOf] 'ParsingResult<Object> '
                                                                                [ClassType] 'ParsingResult<Object> '
                                                                                    [Identifier] 'ParsingResult'
                                                                                    [Optional] '<Object> '
                                                                                        [TypeArguments] '<Object> '
                                                                                            [TypeArgument] 'Object'
                                                                                                [ReferenceType] 'Object'
                                                                                                    [Sequence] 'Object'
                                                                                                        [ClassType] 'Object'
                                                                                                            [Identifier] 'Object'
                                                                        [VariableDeclarators] 'parsingResult = RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                            [VariableDeclarator] 'parsingResult = RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                [Identifier] 'parsingResult '
                                                                                [Optional] '= RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                    [Sequence] '= RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                        [VariableInitializer] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                            [Expression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                [ConditionalExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                    [ConditionalOrExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                        [ConditionalAndExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                            [InclusiveOrExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                [ExclusiveOrExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                    [AndExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                        [EqualityExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                            [RelationalExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                                [ShiftExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                                    [AdditiveExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                                        [MultiplicativeExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                                            [UnaryExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                                                [Sequence] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                                                    [Primary] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                                                        [Sequence] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                                                                                                            [QualifiedIdentifier] 'RecoveringParseRunner.run'
                                                                                                                                                                [Identifier] 'RecoveringParseRunner'
                                                                                                                                                                [ZeroOrMore] '.run'
                                                                                                                                                                    [Sequence] '.run'
                                                                                                                                                                        [Identifier] 'run'
                                                                                                                                                            [Optional] '(compilationUnit, testSource)'
                                                                                                                                                                [IdentifierSuffix] '(compilationUnit, testSource)'
                                                                                                                                                                    [Arguments] '(compilationUnit, testSource)'
                                                                                                                                                                        [Optional] 'compilationUnit, testSource'
                                                                                                                                                                            [Sequence] 'compilationUnit, testSource'
                                                                                                                                                                                [Expression] 'compilationUnit'
                                                                                                                                                                                    [ConditionalExpression] 'compilationUnit'
                                                                                                                                                                                        [ConditionalOrExpression] 'compilationUnit'
                                                                                                                                                                                            [ConditionalAndExpression] 'compilationUnit'
                                                                                                                                                                                                [InclusiveOrExpression] 'compilationUnit'
                                                                                                                                                                                                    [ExclusiveOrExpression] 'compilationUnit'
                                                                                                                                                                                                        [AndExpression] 'compilationUnit'
                                                                                                                                                                                                            [EqualityExpression] 'compilationUnit'
                                                                                                                                                                                                                [RelationalExpression] 'compilationUnit'
                                                                                                                                                                                                                    [ShiftExpression] 'compilationUnit'
                                                                                                                                                                                                                        [AdditiveExpression] 'compilationUnit'
                                                                                                                                                                                                                            [MultiplicativeExpression] 'compilationUnit'
                                                                                                                                                                                                                                [UnaryExpression] 'compilationUnit'
                                                                                                                                                                                                                                    [Sequence] 'compilationUnit'
                                                                                                                                                                                                                                        [Primary] 'compilationUnit'
                                                                                                                                                                                                                                            [Sequence] 'compilationUnit'
                                                                                                                                                                                                                                                [QualifiedIdentifier] 'compilationUnit'
                                                                                                                                                                                                                                                    [Identifier] 'compilationUnit'
                                                                                                                                                                                [ZeroOrMore] ', testSource'
                                                                                                                                                                                    [Sequence] ', testSource'
                                                                                                                                                                                        [Expression] 'testSource'
                                                                                                                                                                                            [ConditionalExpression] 'testSource'
                                                                                                                                                                                                [ConditionalOrExpression] 'testSource'
                                                                                                                                                                                                    [ConditionalAndExpression] 'testSource'
                                                                                                                                                                                                        [InclusiveOrExpression] 'testSource'
                                                                                                                                                                                                            [ExclusiveOrExpression] 'testSource'
                                                                                                                                                                                                                [AndExpression] 'testSource'
                                                                                                                                                                                                                    [EqualityExpression] 'testSource'
                                                                                                                                                                                                                        [RelationalExpression] 'testSource'
                                                                                                                                                                                                                            [ShiftExpression] 'testSource'
                                                                                                                                                                                                                                [AdditiveExpression] 'testSource'
                                                                                                                                                                                                                                    [MultiplicativeExpression] 'testSource'
                                                                                                                                                                                                                                        [UnaryExpression] 'testSource'
                                                                                                                                                                                                                                            [Sequence] 'testSource'
                                                                                                                                                                                                                                                [Primary] 'testSource'
                                                                                                                                                                                                                                                    [Sequence] 'testSource'
                                                                                                                                                                                                                                                        [QualifiedIdentifier] 'testSource'
                                                                                                                                                                                                                                                            [Identifier] 'testSource'
                                                                [BlockStatement] 'if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        '
                                                                    [Statement] 'if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        '
                                                                        [Sequence] 'if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        '
                                                                            [ParExpression] '(parsingResult.hasErrors()) '
                                                                                [Expression] 'parsingResult.hasErrors()'
                                                                                    [ConditionalExpression] 'parsingResult.hasErrors()'
                                                                                        [ConditionalOrExpression] 'parsingResult.hasErrors()'
                                                                                            [ConditionalAndExpression] 'parsingResult.hasErrors()'
                                                                                                [InclusiveOrExpression] 'parsingResult.hasErrors()'
                                                                                                    [ExclusiveOrExpression] 'parsingResult.hasErrors()'
                                                                                                        [AndExpression] 'parsingResult.hasErrors()'
                                                                                                            [EqualityExpression] 'parsingResult.hasErrors()'
                                                                                                                [RelationalExpression] 'parsingResult.hasErrors()'
                                                                                                                    [ShiftExpression] 'parsingResult.hasErrors()'
                                                                                                                        [AdditiveExpression] 'parsingResult.hasErrors()'
                                                                                                                            [MultiplicativeExpression] 'parsingResult.hasErrors()'
                                                                                                                                [UnaryExpression] 'parsingResult.hasErrors()'
                                                                                                                                    [Sequence] 'parsingResult.hasErrors()'
                                                                                                                                        [Primary] 'parsingResult.hasErrors()'
                                                                                                                                            [Sequence] 'parsingResult.hasErrors()'
                                                                                                                                                [QualifiedIdentifier] 'parsingResult.hasErrors'
                                                                                                                                                    [Identifier] 'parsingResult'
                                                                                                                                                    [ZeroOrMore] '.hasErrors'
                                                                                                                                                        [Sequence] '.hasErrors'
                                                                                                                                                            [Identifier] 'hasErrors'
                                                                                                                                                [Optional] '()'
                                                                                                                                                    [IdentifierSuffix] '()'
                                                                                                                                                        [Arguments] '()'
                                                                            [Statement] '{\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        '
                                                                                [Block] '{\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        }\n        '
                                                                                    [BlockStatements] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        '
                                                                                        [BlockStatement] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        '
                                                                                            [Statement] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        '
                                                                                                [Sequence] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            );\n        '
                                                                                                    [StatementExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                        [ConditionalExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                            [ConditionalOrExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                [ConditionalAndExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                    [InclusiveOrExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                        [ExclusiveOrExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                            [AndExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                [EqualityExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                    [RelationalExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                        [ShiftExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                            [AdditiveExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                [MultiplicativeExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                    [UnaryExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                        [Sequence] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                            [Primary] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                                [Sequence] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                                    [QualifiedIdentifier] 'fail'
                                                                                                                                                                        [Identifier] 'fail'
                                                                                                                                                                    [Optional] '("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                                        [IdentifierSuffix] '("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                                            [Arguments] '("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            )'
                                                                                                                                                                                [Optional] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                    [Sequence] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                        [Expression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                            [ConditionalExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                [ConditionalOrExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                    [ConditionalAndExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                        [InclusiveOrExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                            [ExclusiveOrExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                [AndExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                    [EqualityExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                        [RelationalExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                            [ShiftExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                [AdditiveExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                    [MultiplicativeExpression] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                        [UnaryExpression] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                            [Sequence] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                                [Primary] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                                    [Literal] '"\n--- ParseErrors ---\n" '
                                                                                                                                                                                                                                                        [FirstOf] '"\n--- ParseErrors ---\n"'
                                                                                                                                                                                                                                                            [StringLiteral] '"\n--- ParseErrors ---\n"'
                                                                                                                                                                                                                                                                [ZeroOrMore] '\n--- ParseErrors ---\n'
                                                                                                                                                                                                                                    [ZeroOrMore] '+\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                        [Sequence] '+\n                    StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                            [FirstOf] '+\n                    '
                                                                                                                                                                                                                                            [MultiplicativeExpression] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                [UnaryExpression] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                    [Sequence] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                        [Primary] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                            [Sequence] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                                [QualifiedIdentifier] 'StringUtils.join'
                                                                                                                                                                                                                                                                    [Identifier] 'StringUtils'
                                                                                                                                                                                                                                                                    [ZeroOrMore] '.join'
                                                                                                                                                                                                                                                                        [Sequence] '.join'
                                                                                                                                                                                                                                                                            [Identifier] 'join'
                                                                                                                                                                                                                                                                [Optional] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                                    [IdentifierSuffix] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                                        [Arguments] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                                                                                                                                                            [Optional] 'parsingResult.parseErrors, "---\n"'
                                                                                                                                                                                                                                                                                [Sequence] 'parsingResult.parseErrors, "---\n"'
                                                                                                                                                                                                                                                                                    [Expression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                        [ConditionalExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                            [ConditionalOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                [ConditionalAndExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                    [InclusiveOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                        [ExclusiveOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                            [AndExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                [EqualityExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                    [RelationalExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                        [ShiftExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                            [AdditiveExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                [MultiplicativeExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                    [UnaryExpression] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                        [Sequence] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                            [Primary] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                                [Sequence] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                                    [QualifiedIdentifier] 'parsingResult.parseErrors'
                                                                                                                                                                                                                                                                                                                                                        [Identifier] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                                        [ZeroOrMore] '.parseErrors'
                                                                                                                                                                                                                                                                                                                                                            [Sequence] '.parseErrors'
                                                                                                                                                                                                                                                                                                                                                                [Identifier] 'parseErrors'
                                                                                                                                                                                                                                                                                    [ZeroOrMore] ', "---\n"'
                                                                                                                                                                                                                                                                                        [Sequence] ', "---\n"'
                                                                                                                                                                                                                                                                                            [Expression] '"---\n"'
                                                                                                                                                                                                                                                                                                [ConditionalExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                    [ConditionalOrExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                        [ConditionalAndExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                            [InclusiveOrExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                [ExclusiveOrExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                    [AndExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                        [EqualityExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                            [RelationalExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                [ShiftExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                    [AdditiveExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                        [MultiplicativeExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                            [UnaryExpression] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                [Sequence] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                    [Primary] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                        [Literal] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                            [FirstOf] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                                [StringLiteral] '"---\n"'
                                                                                                                                                                                                                                                                                                                                                                    [ZeroOrMore] '---\n'
                                                                                                                                                                                                                                        [Sequence] '+\n                    "\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                            [FirstOf] '+\n                    '
                                                                                                                                                                                                                                            [MultiplicativeExpression] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                [UnaryExpression] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                    [Sequence] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                        [Primary] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                            [Literal] '"\n--- ParseTree ---\n" '
                                                                                                                                                                                                                                                                [FirstOf] '"\n--- ParseTree ---\n"'
                                                                                                                                                                                                                                                                    [StringLiteral] '"\n--- ParseTree ---\n"'
                                                                                                                                                                                                                                                                        [ZeroOrMore] '\n--- ParseTree ---\n'
                                                                                                                                                                                                                                        [Sequence] '+\n                    printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                            [FirstOf] '+\n                    '
                                                                                                                                                                                                                                            [MultiplicativeExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                                [UnaryExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                                    [Sequence] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                                        [Primary] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                                            [Sequence] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                                                [QualifiedIdentifier] 'printNodeTree'
                                                                                                                                                                                                                                                                    [Identifier] 'printNodeTree'
                                                                                                                                                                                                                                                                [Optional] '(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                                                    [IdentifierSuffix] '(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                                                        [Arguments] '(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())\n            '
                                                                                                                                                                                                                                                                            [Optional] 'parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                [Sequence] 'parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                    [Expression] 'parsingResult'
                                                                                                                                                                                                                                                                                        [ConditionalExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                            [ConditionalOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                [ConditionalAndExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                    [InclusiveOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                        [ExclusiveOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                            [AndExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                [EqualityExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                    [RelationalExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                        [ShiftExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                            [AdditiveExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                [MultiplicativeExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                    [UnaryExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                        [Sequence] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                            [Primary] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                                [Sequence] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                                    [QualifiedIdentifier] 'parsingResult'
                                                                                                                                                                                                                                                                                                                                                        [Identifier] 'parsingResult'
                                                                                                                                                                                                                                                                                    [ZeroOrMore] ', Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                        [Sequence] ', Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                            [Expression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                [ConditionalExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                    [ConditionalOrExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                        [ConditionalAndExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                            [InclusiveOrExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                [ExclusiveOrExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                    [AndExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                        [EqualityExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                            [RelationalExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                                [ShiftExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                                    [AdditiveExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                                        [MultiplicativeExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                                            [UnaryExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                                                [Sequence] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                                                    [Primary] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                                                        [Sequence] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                                                            [QualifiedIdentifier] 'Filters.skipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                                [Identifier] 'Filters'
                                                                                                                                                                                                                                                                                                                                                                [ZeroOrMore] '.skipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                                    [Sequence] '.skipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                                        [Identifier] 'skipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                                            [Optional] '()'
                                                                                                                                                                                                                                                                                                                                                                [IdentifierSuffix] '()'
                                                                                                                                                                                                                                                                                                                                                                    [Arguments] '()'
                                                                [BlockStatement] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    '
                                                                    [Statement] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    '
                                                                        [Sequence] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        );\n    '
                                                                            [StatementExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                [ConditionalExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                    [ConditionalOrExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                        [ConditionalAndExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                            [InclusiveOrExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                [ExclusiveOrExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                    [AndExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                        [EqualityExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                            [RelationalExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                [ShiftExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                    [AdditiveExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                        [MultiplicativeExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                            [UnaryExpression] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                                [Sequence] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                                    [Primary] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                                        [Sequence] 'assertEqualsMultiline(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                                            [QualifiedIdentifier] 'assertEqualsMultiline'
                                                                                                                                                [Identifier] 'assertEqualsMultiline'
                                                                                                                                            [Optional] '(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                                                [IdentifierSuffix] '(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                                                    [Arguments] '(\n                printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        )'
                                                                                                                                                        [Optional] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                            [Sequence] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()),\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                [Expression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                    [ConditionalExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                        [ConditionalOrExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                            [ConditionalAndExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                [InclusiveOrExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                    [ExclusiveOrExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                        [AndExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                            [EqualityExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                [RelationalExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                    [ShiftExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                        [AdditiveExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                            [MultiplicativeExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                                [UnaryExpression] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                                    [Sequence] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                                        [Primary] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                                            [Sequence] 'printNodeTree(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                                                [QualifiedIdentifier] 'printNodeTree'
                                                                                                                                                                                                                                    [Identifier] 'printNodeTree'
                                                                                                                                                                                                                                [Optional] '(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                                                    [IdentifierSuffix] '(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                                                        [Arguments] '(parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores())'
                                                                                                                                                                                                                                            [Optional] 'parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                [Sequence] 'parsingResult, Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                    [Expression] 'parsingResult'
                                                                                                                                                                                                                                                        [ConditionalExpression] 'parsingResult'
                                                                                                                                                                                                                                                            [ConditionalOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                [ConditionalAndExpression] 'parsingResult'
                                                                                                                                                                                                                                                                    [InclusiveOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                        [ExclusiveOrExpression] 'parsingResult'
                                                                                                                                                                                                                                                                            [AndExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                [EqualityExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                    [RelationalExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                        [ShiftExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                            [AdditiveExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                [MultiplicativeExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                    [UnaryExpression] 'parsingResult'
                                                                                                                                                                                                                                                                                                        [Sequence] 'parsingResult'
                                                                                                                                                                                                                                                                                                            [Primary] 'parsingResult'
                                                                                                                                                                                                                                                                                                                [Sequence] 'parsingResult'
                                                                                                                                                                                                                                                                                                                    [QualifiedIdentifier] 'parsingResult'
                                                                                                                                                                                                                                                                                                                        [Identifier] 'parsingResult'
                                                                                                                                                                                                                                                    [ZeroOrMore] ', Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                        [Sequence] ', Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                            [Expression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                [ConditionalExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                    [ConditionalOrExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                        [ConditionalAndExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                            [InclusiveOrExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                [ExclusiveOrExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                    [AndExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                        [EqualityExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                            [RelationalExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                [ShiftExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                    [AdditiveExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                        [MultiplicativeExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                            [UnaryExpression] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                [Sequence] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                    [Primary] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                        [Sequence] 'Filters.skipEmptyOptionalsAndZeroOrMores()'
                                                                                                                                                                                                                                                                                                                            [QualifiedIdentifier] 'Filters.skipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                [Identifier] 'Filters'
                                                                                                                                                                                                                                                                                                                                [ZeroOrMore] '.skipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                    [Sequence] '.skipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                                        [Identifier] 'skipEmptyOptionalsAndZeroOrMores'
                                                                                                                                                                                                                                                                                                                            [Optional] '()'
                                                                                                                                                                                                                                                                                                                                [IdentifierSuffix] '()'
                                                                                                                                                                                                                                                                                                                                    [Arguments] '()'
                                                                                                                                                                [ZeroOrMore] ',\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                    [Sequence] ',\n                FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                        [Expression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                            [ConditionalExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                [ConditionalOrExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                    [ConditionalAndExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                        [InclusiveOrExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                            [ExclusiveOrExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                [AndExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                    [EqualityExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                        [RelationalExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                            [ShiftExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                [AdditiveExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                    [MultiplicativeExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                        [UnaryExpression] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                            [Sequence] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                                [Primary] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                                    [Sequence] 'FileUtils.readAllTextFromResource("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                                        [QualifiedIdentifier] 'FileUtils.readAllTextFromResource'
                                                                                                                                                                                                                                            [Identifier] 'FileUtils'
                                                                                                                                                                                                                                            [ZeroOrMore] '.readAllTextFromResource'
                                                                                                                                                                                                                                                [Sequence] '.readAllTextFromResource'
                                                                                                                                                                                                                                                    [Identifier] 'readAllTextFromResource'
                                                                                                                                                                                                                                        [Optional] '("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                                            [IdentifierSuffix] '("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                                                [Arguments] '("res/SimpleJavaTestParseTree.test")\n        '
                                                                                                                                                                                                                                                    [Optional] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                        [Sequence] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                            [Expression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                [ConditionalExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                    [ConditionalOrExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                        [ConditionalAndExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                            [InclusiveOrExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                [ExclusiveOrExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                    [AndExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                        [EqualityExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                            [RelationalExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                [ShiftExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                    [AdditiveExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                        [MultiplicativeExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                            [UnaryExpression] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                [Sequence] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                    [Primary] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                        [Literal] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                            [FirstOf] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                                [StringLiteral] '"res/SimpleJavaTestParseTree.test"'
                                                                                                                                                                                                                                                                                                                                    [ZeroOrMore] 'res/SimpleJavaTestParseTree.test'
    [EOI]
