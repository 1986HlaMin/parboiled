[CompilationUnit] '/*\n * Copyright (C) 2009-2010 Mathias Doenitz\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.parboiled.examples;\n\nimport org.parboiled.Node;\nimport org.parboiled.Parboiled;\nimport org.parboiled.ParserStatistics;\nimport org.parboiled.common.Predicates;\nimport org.parboiled.parserunners.RecoveringParseRunner;\nimport org.parboiled.Rule;\nimport org.parboiled.common.FileUtils;\nimport org.parboiled.common.StringUtils;\nimport org.parboiled.examples.java.JavaParser;\nimport org.parboiled.support.ParsingResult;\nimport org.parboiled.support.Filters;\nimport org.testng.annotations.Test;\n\nimport static org.parboiled.support.ParseTreeUtils.printNodeTree;\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\n\npublic class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
  [Optional] 'package org.parboiled.examples;\n\n'
    [PackageDeclaration] 'package org.parboiled.examples;\n\n'
      [Sequence] 'package org.parboiled.examples;\n\n'
        [QualifiedIdentifier] 'org.parboiled.examples'
          [Identifier] 'org'
          [ZeroOrMore] '.parboiled.examples'
            [Sequence] '.parboiled'
              [Identifier] 'parboiled'
            [Sequence] '.examples'
              [Identifier] 'examples'
  [ZeroOrMore] 'import org.parboiled.Node;\nimport org.parboiled.Parboiled;\nimport org.parboiled.ParserStatistics;\nimport org.parboiled.common.Predicates;\nimport org.parboiled.parserunners.RecoveringParseRunner;\nimport org.parboiled.Rule;\nimport org.parboiled.common.FileUtils;\nimport org.parboiled.common.StringUtils;\nimport org.parboiled.examples.java.JavaParser;\nimport org.parboiled.support.ParsingResult;\nimport org.parboiled.support.Filters;\nimport org.testng.annotations.Test;\n\nimport static org.parboiled.support.ParseTreeUtils.printNodeTree;\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.fail;\n\n'
    [ImportDeclaration] 'import org.parboiled.Node;\n'
      [QualifiedIdentifier] 'org.parboiled.Node'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.Node'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.Node'
            [Identifier] 'Node'
    [ImportDeclaration] 'import org.parboiled.Parboiled;\n'
      [QualifiedIdentifier] 'org.parboiled.Parboiled'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.Parboiled'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.Parboiled'
            [Identifier] 'Parboiled'
    [ImportDeclaration] 'import org.parboiled.ParserStatistics;\n'
      [QualifiedIdentifier] 'org.parboiled.ParserStatistics'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.ParserStatistics'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.ParserStatistics'
            [Identifier] 'ParserStatistics'
    [ImportDeclaration] 'import org.parboiled.common.Predicates;\n'
      [QualifiedIdentifier] 'org.parboiled.common.Predicates'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.common.Predicates'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.common'
            [Identifier] 'common'
          [Sequence] '.Predicates'
            [Identifier] 'Predicates'
    [ImportDeclaration] 'import org.parboiled.parserunners.RecoveringParseRunner;\n'
      [QualifiedIdentifier] 'org.parboiled.parserunners.RecoveringParseRunner'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.parserunners.RecoveringParseRunner'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.parserunners'
            [Identifier] 'parserunners'
          [Sequence] '.RecoveringParseRunner'
            [Identifier] 'RecoveringParseRunner'
    [ImportDeclaration] 'import org.parboiled.Rule;\n'
      [QualifiedIdentifier] 'org.parboiled.Rule'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.Rule'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.Rule'
            [Identifier] 'Rule'
    [ImportDeclaration] 'import org.parboiled.common.FileUtils;\n'
      [QualifiedIdentifier] 'org.parboiled.common.FileUtils'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.common.FileUtils'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.common'
            [Identifier] 'common'
          [Sequence] '.FileUtils'
            [Identifier] 'FileUtils'
    [ImportDeclaration] 'import org.parboiled.common.StringUtils;\n'
      [QualifiedIdentifier] 'org.parboiled.common.StringUtils'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.common.StringUtils'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.common'
            [Identifier] 'common'
          [Sequence] '.StringUtils'
            [Identifier] 'StringUtils'
    [ImportDeclaration] 'import org.parboiled.examples.java.JavaParser;\n'
      [QualifiedIdentifier] 'org.parboiled.examples.java.JavaParser'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.examples.java.JavaParser'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.examples'
            [Identifier] 'examples'
          [Sequence] '.java'
            [Identifier] 'java'
          [Sequence] '.JavaParser'
            [Identifier] 'JavaParser'
    [ImportDeclaration] 'import org.parboiled.support.ParsingResult;\n'
      [QualifiedIdentifier] 'org.parboiled.support.ParsingResult'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.support.ParsingResult'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.support'
            [Identifier] 'support'
          [Sequence] '.ParsingResult'
            [Identifier] 'ParsingResult'
    [ImportDeclaration] 'import org.parboiled.support.Filters;\n'
      [QualifiedIdentifier] 'org.parboiled.support.Filters'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.support.Filters'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.support'
            [Identifier] 'support'
          [Sequence] '.Filters'
            [Identifier] 'Filters'
    [ImportDeclaration] 'import org.testng.annotations.Test;\n\n'
      [QualifiedIdentifier] 'org.testng.annotations.Test'
        [Identifier] 'org'
        [ZeroOrMore] '.testng.annotations.Test'
          [Sequence] '.testng'
            [Identifier] 'testng'
          [Sequence] '.annotations'
            [Identifier] 'annotations'
          [Sequence] '.Test'
            [Identifier] 'Test'
    [ImportDeclaration] 'import static org.parboiled.support.ParseTreeUtils.printNodeTree;\n'
      [Optional] 'static '
      [QualifiedIdentifier] 'org.parboiled.support.ParseTreeUtils.printNodeTree'
        [Identifier] 'org'
        [ZeroOrMore] '.parboiled.support.ParseTreeUtils.printNodeTree'
          [Sequence] '.parboiled'
            [Identifier] 'parboiled'
          [Sequence] '.support'
            [Identifier] 'support'
          [Sequence] '.ParseTreeUtils'
            [Identifier] 'ParseTreeUtils'
          [Sequence] '.printNodeTree'
            [Identifier] 'printNodeTree'
    [ImportDeclaration] 'import static org.testng.Assert.assertEquals;\n'
      [Optional] 'static '
      [QualifiedIdentifier] 'org.testng.Assert.assertEquals'
        [Identifier] 'org'
        [ZeroOrMore] '.testng.Assert.assertEquals'
          [Sequence] '.testng'
            [Identifier] 'testng'
          [Sequence] '.Assert'
            [Identifier] 'Assert'
          [Sequence] '.assertEquals'
            [Identifier] 'assertEquals'
    [ImportDeclaration] 'import static org.testng.Assert.fail;\n\n'
      [Optional] 'static '
      [QualifiedIdentifier] 'org.testng.Assert.fail'
        [Identifier] 'org'
        [ZeroOrMore] '.testng.Assert.fail'
          [Sequence] '.testng'
            [Identifier] 'testng'
          [Sequence] '.Assert'
            [Identifier] 'Assert'
          [Sequence] '.fail'
            [Identifier] 'fail'
  [ZeroOrMore] 'public class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
    [TypeDeclaration] 'public class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
      [Sequence] 'public class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
        [ZeroOrMore] 'public '
          [Modifier] 'public '
            [Sequence] 'public '
              [FirstOf] 'public'
        [FirstOf] 'class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
          [ClassDeclaration] 'class JavaTest {\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
            [Identifier] 'JavaTest '
            [ClassBody] '{\n\n    @Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n}'
              [ZeroOrMore] '@Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                [ClassBodyDeclaration] '@Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                  [Sequence] '@Test\n    public void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                    [ZeroOrMore] '@Test\n    public '
                      [Modifier] '@Test\n    '
                        [Annotation] '@Test\n    '
                          [QualifiedIdentifier] 'Test\n    '
                            [Identifier] 'Test\n    '
                      [Modifier] 'public '
                        [Sequence] 'public '
                          [FirstOf] 'public'
                    [MemberDecl] 'void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                      [Sequence] 'void simpleJavaTest() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                        [Identifier] 'simpleJavaTest'
                        [VoidMethodDeclaratorRest] '() {\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                          [FormalParameters] '() '
                          [FirstOf] '{\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                            [MethodBody] '{\n        String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    }\n\n'
                              [BlockStatements] 'String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        JavaParser parser = Parboiled.createParser(JavaParser.class);\n        Rule compilationUnit = parser.CompilationUnit();\n\n        assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    '
                                [BlockStatement] 'String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        '
                                  [LocalVariableDeclarationStatement] 'String testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java");\n        '
                                    [Type] 'String '
                                      [FirstOf] 'String '
                                        [ClassType] 'String '
                                          [Identifier] 'String '
                                    [VariableDeclarators] 'testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                      [VariableDeclarator] 'testSource = FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                        [Identifier] 'testSource '
                                        [Optional] '= FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                          [Sequence] '= FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                            [VariableInitializer] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                              [Expression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                [ConditionalExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                  [ConditionalOrExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                    [ConditionalAndExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                      [InclusiveOrExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                        [ExclusiveOrExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                          [AndExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                            [EqualityExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                              [RelationalExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                [ShiftExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                  [AdditiveExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                    [MultiplicativeExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                      [UnaryExpression] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                        [Sequence] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                          [Primary] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                            [Sequence] 'FileUtils.readAllText("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                              [QualifiedIdentifier] 'FileUtils.readAllText'
                                                                                [Identifier] 'FileUtils'
                                                                                [ZeroOrMore] '.readAllText'
                                                                                  [Sequence] '.readAllText'
                                                                                    [Identifier] 'readAllText'
                                                                              [Optional] '("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                                [IdentifierSuffix] '("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                                  [Arguments] '("src/test/java/org/parboiled/examples/JavaTest.java")'
                                                                                    [Optional] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                      [Sequence] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                        [Expression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                          [ConditionalExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                            [ConditionalOrExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                              [ConditionalAndExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                [InclusiveOrExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                  [ExclusiveOrExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                    [AndExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                      [EqualityExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                        [RelationalExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                          [ShiftExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                            [AdditiveExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                              [MultiplicativeExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                                [UnaryExpression] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                                  [Sequence] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                                    [Primary] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                                      [Literal] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                                        [FirstOf] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                                          [StringLiteral] '"src/test/java/org/parboiled/examples/JavaTest.java"'
                                                                                                                            [ZeroOrMore] 'src/test/java/org/parboiled/examples/JavaTest.java'
                                [BlockStatement] 'JavaParser parser = Parboiled.createParser(JavaParser.class);\n        '
                                  [LocalVariableDeclarationStatement] 'JavaParser parser = Parboiled.createParser(JavaParser.class);\n        '
                                    [Type] 'JavaParser '
                                      [FirstOf] 'JavaParser '
                                        [ClassType] 'JavaParser '
                                          [Identifier] 'JavaParser '
                                    [VariableDeclarators] 'parser = Parboiled.createParser(JavaParser.class)'
                                      [VariableDeclarator] 'parser = Parboiled.createParser(JavaParser.class)'
                                        [Identifier] 'parser '
                                        [Optional] '= Parboiled.createParser(JavaParser.class)'
                                          [Sequence] '= Parboiled.createParser(JavaParser.class)'
                                            [VariableInitializer] 'Parboiled.createParser(JavaParser.class)'
                                              [Expression] 'Parboiled.createParser(JavaParser.class)'
                                                [ConditionalExpression] 'Parboiled.createParser(JavaParser.class)'
                                                  [ConditionalOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                    [ConditionalAndExpression] 'Parboiled.createParser(JavaParser.class)'
                                                      [InclusiveOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                        [ExclusiveOrExpression] 'Parboiled.createParser(JavaParser.class)'
                                                          [AndExpression] 'Parboiled.createParser(JavaParser.class)'
                                                            [EqualityExpression] 'Parboiled.createParser(JavaParser.class)'
                                                              [RelationalExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                [ShiftExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                  [AdditiveExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                    [MultiplicativeExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                      [UnaryExpression] 'Parboiled.createParser(JavaParser.class)'
                                                                        [Sequence] 'Parboiled.createParser(JavaParser.class)'
                                                                          [Primary] 'Parboiled.createParser(JavaParser.class)'
                                                                            [Sequence] 'Parboiled.createParser(JavaParser.class)'
                                                                              [QualifiedIdentifier] 'Parboiled.createParser'
                                                                                [Identifier] 'Parboiled'
                                                                                [ZeroOrMore] '.createParser'
                                                                                  [Sequence] '.createParser'
                                                                                    [Identifier] 'createParser'
                                                                              [Optional] '(JavaParser.class)'
                                                                                [IdentifierSuffix] '(JavaParser.class)'
                                                                                  [Arguments] '(JavaParser.class)'
                                                                                    [Optional] 'JavaParser.class'
                                                                                      [Sequence] 'JavaParser.class'
                                                                                        [Expression] 'JavaParser.class'
                                                                                          [ConditionalExpression] 'JavaParser.class'
                                                                                            [ConditionalOrExpression] 'JavaParser.class'
                                                                                              [ConditionalAndExpression] 'JavaParser.class'
                                                                                                [InclusiveOrExpression] 'JavaParser.class'
                                                                                                  [ExclusiveOrExpression] 'JavaParser.class'
                                                                                                    [AndExpression] 'JavaParser.class'
                                                                                                      [EqualityExpression] 'JavaParser.class'
                                                                                                        [RelationalExpression] 'JavaParser.class'
                                                                                                          [ShiftExpression] 'JavaParser.class'
                                                                                                            [AdditiveExpression] 'JavaParser.class'
                                                                                                              [MultiplicativeExpression] 'JavaParser.class'
                                                                                                                [UnaryExpression] 'JavaParser.class'
                                                                                                                  [Sequence] 'JavaParser.class'
                                                                                                                    [Primary] 'JavaParser.class'
                                                                                                                      [Sequence] 'JavaParser.class'
                                                                                                                        [QualifiedIdentifier] 'JavaParser'
                                                                                                                          [Identifier] 'JavaParser'
                                                                                                                        [Optional] '.class'
                                                                                                                          [IdentifierSuffix] '.class'
                                                                                                                            [Sequence] '.class'
                                                                                                                              [FirstOf] 'class'
                                [BlockStatement] 'Rule compilationUnit = parser.CompilationUnit();\n\n        '
                                  [LocalVariableDeclarationStatement] 'Rule compilationUnit = parser.CompilationUnit();\n\n        '
                                    [Type] 'Rule '
                                      [FirstOf] 'Rule '
                                        [ClassType] 'Rule '
                                          [Identifier] 'Rule '
                                    [VariableDeclarators] 'compilationUnit = parser.CompilationUnit()'
                                      [VariableDeclarator] 'compilationUnit = parser.CompilationUnit()'
                                        [Identifier] 'compilationUnit '
                                        [Optional] '= parser.CompilationUnit()'
                                          [Sequence] '= parser.CompilationUnit()'
                                            [VariableInitializer] 'parser.CompilationUnit()'
                                              [Expression] 'parser.CompilationUnit()'
                                                [ConditionalExpression] 'parser.CompilationUnit()'
                                                  [ConditionalOrExpression] 'parser.CompilationUnit()'
                                                    [ConditionalAndExpression] 'parser.CompilationUnit()'
                                                      [InclusiveOrExpression] 'parser.CompilationUnit()'
                                                        [ExclusiveOrExpression] 'parser.CompilationUnit()'
                                                          [AndExpression] 'parser.CompilationUnit()'
                                                            [EqualityExpression] 'parser.CompilationUnit()'
                                                              [RelationalExpression] 'parser.CompilationUnit()'
                                                                [ShiftExpression] 'parser.CompilationUnit()'
                                                                  [AdditiveExpression] 'parser.CompilationUnit()'
                                                                    [MultiplicativeExpression] 'parser.CompilationUnit()'
                                                                      [UnaryExpression] 'parser.CompilationUnit()'
                                                                        [Sequence] 'parser.CompilationUnit()'
                                                                          [Primary] 'parser.CompilationUnit()'
                                                                            [Sequence] 'parser.CompilationUnit()'
                                                                              [QualifiedIdentifier] 'parser.CompilationUnit'
                                                                                [Identifier] 'parser'
                                                                                [ZeroOrMore] '.CompilationUnit'
                                                                                  [Sequence] '.CompilationUnit'
                                                                                    [Identifier] 'CompilationUnit'
                                                                              [Optional] '()'
                                                                                [IdentifierSuffix] '()'
                                                                                  [Arguments] '()'
                                [BlockStatement] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        '
                                  [Statement] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        '
                                    [Sequence] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n");\n\n        '
                                      [StatementExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                        [ConditionalExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                          [ConditionalOrExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                            [ConditionalAndExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                              [InclusiveOrExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                [ExclusiveOrExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                  [AndExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                    [EqualityExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                      [RelationalExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                        [ShiftExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                          [AdditiveExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                            [MultiplicativeExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                              [UnaryExpression] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                                [Sequence] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                                  [Primary] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                                    [Sequence] 'assertEquals(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                                      [QualifiedIdentifier] 'assertEquals'
                                                                        [Identifier] 'assertEquals'
                                                                      [Optional] '(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                                        [IdentifierSuffix] '(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                                          [Arguments] '(ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n")'
                                                                            [Optional] 'ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                              [Sequence] 'ParserStatistics.generateFor(compilationUnit).toString(), "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                [Expression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                  [ConditionalExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                    [ConditionalOrExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                      [ConditionalAndExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                        [InclusiveOrExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                          [ExclusiveOrExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                            [AndExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                              [EqualityExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                                [RelationalExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                                  [ShiftExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                                    [AdditiveExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                                      [MultiplicativeExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                                        [UnaryExpression] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                                          [Sequence] 'ParserStatistics.generateFor(compilationUnit).toString()'
                                                                                                            [Primary] 'ParserStatistics.generateFor(compilationUnit)'
                                                                                                              [Sequence] 'ParserStatistics.generateFor(compilationUnit)'
                                                                                                                [QualifiedIdentifier] 'ParserStatistics.generateFor'
                                                                                                                  [Identifier] 'ParserStatistics'
                                                                                                                  [ZeroOrMore] '.generateFor'
                                                                                                                    [Sequence] '.generateFor'
                                                                                                                      [Identifier] 'generateFor'
                                                                                                                [Optional] '(compilationUnit)'
                                                                                                                  [IdentifierSuffix] '(compilationUnit)'
                                                                                                                    [Arguments] '(compilationUnit)'
                                                                                                                      [Optional] 'compilationUnit'
                                                                                                                        [Sequence] 'compilationUnit'
                                                                                                                          [Expression] 'compilationUnit'
                                                                                                                            [ConditionalExpression] 'compilationUnit'
                                                                                                                              [ConditionalOrExpression] 'compilationUnit'
                                                                                                                                [ConditionalAndExpression] 'compilationUnit'
                                                                                                                                  [InclusiveOrExpression] 'compilationUnit'
                                                                                                                                    [ExclusiveOrExpression] 'compilationUnit'
                                                                                                                                      [AndExpression] 'compilationUnit'
                                                                                                                                        [EqualityExpression] 'compilationUnit'
                                                                                                                                          [RelationalExpression] 'compilationUnit'
                                                                                                                                            [ShiftExpression] 'compilationUnit'
                                                                                                                                              [AdditiveExpression] 'compilationUnit'
                                                                                                                                                [MultiplicativeExpression] 'compilationUnit'
                                                                                                                                                  [UnaryExpression] 'compilationUnit'
                                                                                                                                                    [Sequence] 'compilationUnit'
                                                                                                                                                      [Primary] 'compilationUnit'
                                                                                                                                                        [Sequence] 'compilationUnit'
                                                                                                                                                          [QualifiedIdentifier] 'compilationUnit'
                                                                                                                                                            [Identifier] 'compilationUnit'
                                                                                                            [ZeroOrMore] '.toString()'
                                                                                                              [Selector] '.toString()'
                                                                                                                [Sequence] '.toString()'
                                                                                                                  [Identifier] 'toString'
                                                                                                                  [Optional] '()'
                                                                                                                    [Arguments] '()'
                                                                                [ZeroOrMore] ', "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                  [Sequence] ', "" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                    [Expression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                      [ConditionalExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                        [ConditionalOrExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                          [ConditionalAndExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                            [InclusiveOrExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                              [ExclusiveOrExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                                [AndExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                                  [EqualityExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                                    [RelationalExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                                      [ShiftExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                                        [AdditiveExpression] '"" +\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                                          [MultiplicativeExpression] '"" '
                                                                                                            [UnaryExpression] '"" '
                                                                                                              [Sequence] '"" '
                                                                                                                [Primary] '"" '
                                                                                                                  [Literal] '"" '
                                                                                                                    [FirstOf] '""'
                                                                                                                      [StringLiteral] '""'
                                                                                                          [ZeroOrMore] '+\n                "Parser statistics for rule 'CompilationUnit':\n" +\n                "    Total rules       : 681\n" +\n                "        Actions       : 0\n" +\n                "        Any           : 1\n" +\n                "        CharIgnoreCase: 1\n" +\n                "        Char          : 86\n" +\n                "        Custom        : 0\n" +\n                "        CharRange     : 9\n" +\n                "        AnyOf         : 16\n" +\n                "        Empty         : 0\n" +\n                "        FirstOf       : 64\n" +\n                "        FirstOfStrings: 4\n" +\n                "        Nothing       : 0\n" +\n                "        OneOrMore     : 7\n" +\n                "        Optional      : 40\n" +\n                "        Sequence      : 309\n" +\n                "        String        : 80\n" +\n                "        Test          : 0\n" +\n                "        TestNot       : 13\n" +\n                "        ZeroOrMore    : 51\n" +\n                "\n" +\n                "    Action Classes    : 0\n" +\n                "    ProxyMatchers     : 14\n" +\n                "    VarFramingMatchers: 0\n" +\n                "MemoMismatchesMatchers: 7\n"'
                                                                                                            [Sequence] '+\n                "Parser statistics for rule 'CompilationUnit':\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"Parser statistics for rule 'CompilationUnit':\n" '
                                                                                                                [UnaryExpression] '"Parser statistics for rule 'CompilationUnit':\n" '
                                                                                                                  [Sequence] '"Parser statistics for rule 'CompilationUnit':\n" '
                                                                                                                    [Primary] '"Parser statistics for rule 'CompilationUnit':\n" '
                                                                                                                      [Literal] '"Parser statistics for rule 'CompilationUnit':\n" '
                                                                                                                        [FirstOf] '"Parser statistics for rule 'CompilationUnit':\n"'
                                                                                                                          [StringLiteral] '"Parser statistics for rule 'CompilationUnit':\n"'
                                                                                                                            [ZeroOrMore] 'Parser statistics for rule 'CompilationUnit':\n'
                                                                                                            [Sequence] '+\n                "    Total rules       : 681\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"    Total rules       : 681\n" '
                                                                                                                [UnaryExpression] '"    Total rules       : 681\n" '
                                                                                                                  [Sequence] '"    Total rules       : 681\n" '
                                                                                                                    [Primary] '"    Total rules       : 681\n" '
                                                                                                                      [Literal] '"    Total rules       : 681\n" '
                                                                                                                        [FirstOf] '"    Total rules       : 681\n"'
                                                                                                                          [StringLiteral] '"    Total rules       : 681\n"'
                                                                                                                            [ZeroOrMore] '    Total rules       : 681\n'
                                                                                                            [Sequence] '+\n                "        Actions       : 0\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Actions       : 0\n" '
                                                                                                                [UnaryExpression] '"        Actions       : 0\n" '
                                                                                                                  [Sequence] '"        Actions       : 0\n" '
                                                                                                                    [Primary] '"        Actions       : 0\n" '
                                                                                                                      [Literal] '"        Actions       : 0\n" '
                                                                                                                        [FirstOf] '"        Actions       : 0\n"'
                                                                                                                          [StringLiteral] '"        Actions       : 0\n"'
                                                                                                                            [ZeroOrMore] '        Actions       : 0\n'
                                                                                                            [Sequence] '+\n                "        Any           : 1\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Any           : 1\n" '
                                                                                                                [UnaryExpression] '"        Any           : 1\n" '
                                                                                                                  [Sequence] '"        Any           : 1\n" '
                                                                                                                    [Primary] '"        Any           : 1\n" '
                                                                                                                      [Literal] '"        Any           : 1\n" '
                                                                                                                        [FirstOf] '"        Any           : 1\n"'
                                                                                                                          [StringLiteral] '"        Any           : 1\n"'
                                                                                                                            [ZeroOrMore] '        Any           : 1\n'
                                                                                                            [Sequence] '+\n                "        CharIgnoreCase: 1\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        CharIgnoreCase: 1\n" '
                                                                                                                [UnaryExpression] '"        CharIgnoreCase: 1\n" '
                                                                                                                  [Sequence] '"        CharIgnoreCase: 1\n" '
                                                                                                                    [Primary] '"        CharIgnoreCase: 1\n" '
                                                                                                                      [Literal] '"        CharIgnoreCase: 1\n" '
                                                                                                                        [FirstOf] '"        CharIgnoreCase: 1\n"'
                                                                                                                          [StringLiteral] '"        CharIgnoreCase: 1\n"'
                                                                                                                            [ZeroOrMore] '        CharIgnoreCase: 1\n'
                                                                                                            [Sequence] '+\n                "        Char          : 86\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Char          : 86\n" '
                                                                                                                [UnaryExpression] '"        Char          : 86\n" '
                                                                                                                  [Sequence] '"        Char          : 86\n" '
                                                                                                                    [Primary] '"        Char          : 86\n" '
                                                                                                                      [Literal] '"        Char          : 86\n" '
                                                                                                                        [FirstOf] '"        Char          : 86\n"'
                                                                                                                          [StringLiteral] '"        Char          : 86\n"'
                                                                                                                            [ZeroOrMore] '        Char          : 86\n'
                                                                                                            [Sequence] '+\n                "        Custom        : 0\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Custom        : 0\n" '
                                                                                                                [UnaryExpression] '"        Custom        : 0\n" '
                                                                                                                  [Sequence] '"        Custom        : 0\n" '
                                                                                                                    [Primary] '"        Custom        : 0\n" '
                                                                                                                      [Literal] '"        Custom        : 0\n" '
                                                                                                                        [FirstOf] '"        Custom        : 0\n"'
                                                                                                                          [StringLiteral] '"        Custom        : 0\n"'
                                                                                                                            [ZeroOrMore] '        Custom        : 0\n'
                                                                                                            [Sequence] '+\n                "        CharRange     : 9\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        CharRange     : 9\n" '
                                                                                                                [UnaryExpression] '"        CharRange     : 9\n" '
                                                                                                                  [Sequence] '"        CharRange     : 9\n" '
                                                                                                                    [Primary] '"        CharRange     : 9\n" '
                                                                                                                      [Literal] '"        CharRange     : 9\n" '
                                                                                                                        [FirstOf] '"        CharRange     : 9\n"'
                                                                                                                          [StringLiteral] '"        CharRange     : 9\n"'
                                                                                                                            [ZeroOrMore] '        CharRange     : 9\n'
                                                                                                            [Sequence] '+\n                "        AnyOf         : 16\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        AnyOf         : 16\n" '
                                                                                                                [UnaryExpression] '"        AnyOf         : 16\n" '
                                                                                                                  [Sequence] '"        AnyOf         : 16\n" '
                                                                                                                    [Primary] '"        AnyOf         : 16\n" '
                                                                                                                      [Literal] '"        AnyOf         : 16\n" '
                                                                                                                        [FirstOf] '"        AnyOf         : 16\n"'
                                                                                                                          [StringLiteral] '"        AnyOf         : 16\n"'
                                                                                                                            [ZeroOrMore] '        AnyOf         : 16\n'
                                                                                                            [Sequence] '+\n                "        Empty         : 0\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Empty         : 0\n" '
                                                                                                                [UnaryExpression] '"        Empty         : 0\n" '
                                                                                                                  [Sequence] '"        Empty         : 0\n" '
                                                                                                                    [Primary] '"        Empty         : 0\n" '
                                                                                                                      [Literal] '"        Empty         : 0\n" '
                                                                                                                        [FirstOf] '"        Empty         : 0\n"'
                                                                                                                          [StringLiteral] '"        Empty         : 0\n"'
                                                                                                                            [ZeroOrMore] '        Empty         : 0\n'
                                                                                                            [Sequence] '+\n                "        FirstOf       : 64\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        FirstOf       : 64\n" '
                                                                                                                [UnaryExpression] '"        FirstOf       : 64\n" '
                                                                                                                  [Sequence] '"        FirstOf       : 64\n" '
                                                                                                                    [Primary] '"        FirstOf       : 64\n" '
                                                                                                                      [Literal] '"        FirstOf       : 64\n" '
                                                                                                                        [FirstOf] '"        FirstOf       : 64\n"'
                                                                                                                          [StringLiteral] '"        FirstOf       : 64\n"'
                                                                                                                            [ZeroOrMore] '        FirstOf       : 64\n'
                                                                                                            [Sequence] '+\n                "        FirstOfStrings: 4\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        FirstOfStrings: 4\n" '
                                                                                                                [UnaryExpression] '"        FirstOfStrings: 4\n" '
                                                                                                                  [Sequence] '"        FirstOfStrings: 4\n" '
                                                                                                                    [Primary] '"        FirstOfStrings: 4\n" '
                                                                                                                      [Literal] '"        FirstOfStrings: 4\n" '
                                                                                                                        [FirstOf] '"        FirstOfStrings: 4\n"'
                                                                                                                          [StringLiteral] '"        FirstOfStrings: 4\n"'
                                                                                                                            [ZeroOrMore] '        FirstOfStrings: 4\n'
                                                                                                            [Sequence] '+\n                "        Nothing       : 0\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Nothing       : 0\n" '
                                                                                                                [UnaryExpression] '"        Nothing       : 0\n" '
                                                                                                                  [Sequence] '"        Nothing       : 0\n" '
                                                                                                                    [Primary] '"        Nothing       : 0\n" '
                                                                                                                      [Literal] '"        Nothing       : 0\n" '
                                                                                                                        [FirstOf] '"        Nothing       : 0\n"'
                                                                                                                          [StringLiteral] '"        Nothing       : 0\n"'
                                                                                                                            [ZeroOrMore] '        Nothing       : 0\n'
                                                                                                            [Sequence] '+\n                "        OneOrMore     : 7\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        OneOrMore     : 7\n" '
                                                                                                                [UnaryExpression] '"        OneOrMore     : 7\n" '
                                                                                                                  [Sequence] '"        OneOrMore     : 7\n" '
                                                                                                                    [Primary] '"        OneOrMore     : 7\n" '
                                                                                                                      [Literal] '"        OneOrMore     : 7\n" '
                                                                                                                        [FirstOf] '"        OneOrMore     : 7\n"'
                                                                                                                          [StringLiteral] '"        OneOrMore     : 7\n"'
                                                                                                                            [ZeroOrMore] '        OneOrMore     : 7\n'
                                                                                                            [Sequence] '+\n                "        Optional      : 40\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Optional      : 40\n" '
                                                                                                                [UnaryExpression] '"        Optional      : 40\n" '
                                                                                                                  [Sequence] '"        Optional      : 40\n" '
                                                                                                                    [Primary] '"        Optional      : 40\n" '
                                                                                                                      [Literal] '"        Optional      : 40\n" '
                                                                                                                        [FirstOf] '"        Optional      : 40\n"'
                                                                                                                          [StringLiteral] '"        Optional      : 40\n"'
                                                                                                                            [ZeroOrMore] '        Optional      : 40\n'
                                                                                                            [Sequence] '+\n                "        Sequence      : 309\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Sequence      : 309\n" '
                                                                                                                [UnaryExpression] '"        Sequence      : 309\n" '
                                                                                                                  [Sequence] '"        Sequence      : 309\n" '
                                                                                                                    [Primary] '"        Sequence      : 309\n" '
                                                                                                                      [Literal] '"        Sequence      : 309\n" '
                                                                                                                        [FirstOf] '"        Sequence      : 309\n"'
                                                                                                                          [StringLiteral] '"        Sequence      : 309\n"'
                                                                                                                            [ZeroOrMore] '        Sequence      : 309\n'
                                                                                                            [Sequence] '+\n                "        String        : 80\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        String        : 80\n" '
                                                                                                                [UnaryExpression] '"        String        : 80\n" '
                                                                                                                  [Sequence] '"        String        : 80\n" '
                                                                                                                    [Primary] '"        String        : 80\n" '
                                                                                                                      [Literal] '"        String        : 80\n" '
                                                                                                                        [FirstOf] '"        String        : 80\n"'
                                                                                                                          [StringLiteral] '"        String        : 80\n"'
                                                                                                                            [ZeroOrMore] '        String        : 80\n'
                                                                                                            [Sequence] '+\n                "        Test          : 0\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        Test          : 0\n" '
                                                                                                                [UnaryExpression] '"        Test          : 0\n" '
                                                                                                                  [Sequence] '"        Test          : 0\n" '
                                                                                                                    [Primary] '"        Test          : 0\n" '
                                                                                                                      [Literal] '"        Test          : 0\n" '
                                                                                                                        [FirstOf] '"        Test          : 0\n"'
                                                                                                                          [StringLiteral] '"        Test          : 0\n"'
                                                                                                                            [ZeroOrMore] '        Test          : 0\n'
                                                                                                            [Sequence] '+\n                "        TestNot       : 13\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        TestNot       : 13\n" '
                                                                                                                [UnaryExpression] '"        TestNot       : 13\n" '
                                                                                                                  [Sequence] '"        TestNot       : 13\n" '
                                                                                                                    [Primary] '"        TestNot       : 13\n" '
                                                                                                                      [Literal] '"        TestNot       : 13\n" '
                                                                                                                        [FirstOf] '"        TestNot       : 13\n"'
                                                                                                                          [StringLiteral] '"        TestNot       : 13\n"'
                                                                                                                            [ZeroOrMore] '        TestNot       : 13\n'
                                                                                                            [Sequence] '+\n                "        ZeroOrMore    : 51\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"        ZeroOrMore    : 51\n" '
                                                                                                                [UnaryExpression] '"        ZeroOrMore    : 51\n" '
                                                                                                                  [Sequence] '"        ZeroOrMore    : 51\n" '
                                                                                                                    [Primary] '"        ZeroOrMore    : 51\n" '
                                                                                                                      [Literal] '"        ZeroOrMore    : 51\n" '
                                                                                                                        [FirstOf] '"        ZeroOrMore    : 51\n"'
                                                                                                                          [StringLiteral] '"        ZeroOrMore    : 51\n"'
                                                                                                                            [ZeroOrMore] '        ZeroOrMore    : 51\n'
                                                                                                            [Sequence] '+\n                "\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"\n" '
                                                                                                                [UnaryExpression] '"\n" '
                                                                                                                  [Sequence] '"\n" '
                                                                                                                    [Primary] '"\n" '
                                                                                                                      [Literal] '"\n" '
                                                                                                                        [FirstOf] '"\n"'
                                                                                                                          [StringLiteral] '"\n"'
                                                                                                                            [ZeroOrMore] '\n'
                                                                                                            [Sequence] '+\n                "    Action Classes    : 0\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"    Action Classes    : 0\n" '
                                                                                                                [UnaryExpression] '"    Action Classes    : 0\n" '
                                                                                                                  [Sequence] '"    Action Classes    : 0\n" '
                                                                                                                    [Primary] '"    Action Classes    : 0\n" '
                                                                                                                      [Literal] '"    Action Classes    : 0\n" '
                                                                                                                        [FirstOf] '"    Action Classes    : 0\n"'
                                                                                                                          [StringLiteral] '"    Action Classes    : 0\n"'
                                                                                                                            [ZeroOrMore] '    Action Classes    : 0\n'
                                                                                                            [Sequence] '+\n                "    ProxyMatchers     : 14\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"    ProxyMatchers     : 14\n" '
                                                                                                                [UnaryExpression] '"    ProxyMatchers     : 14\n" '
                                                                                                                  [Sequence] '"    ProxyMatchers     : 14\n" '
                                                                                                                    [Primary] '"    ProxyMatchers     : 14\n" '
                                                                                                                      [Literal] '"    ProxyMatchers     : 14\n" '
                                                                                                                        [FirstOf] '"    ProxyMatchers     : 14\n"'
                                                                                                                          [StringLiteral] '"    ProxyMatchers     : 14\n"'
                                                                                                                            [ZeroOrMore] '    ProxyMatchers     : 14\n'
                                                                                                            [Sequence] '+\n                "    VarFramingMatchers: 0\n" '
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"    VarFramingMatchers: 0\n" '
                                                                                                                [UnaryExpression] '"    VarFramingMatchers: 0\n" '
                                                                                                                  [Sequence] '"    VarFramingMatchers: 0\n" '
                                                                                                                    [Primary] '"    VarFramingMatchers: 0\n" '
                                                                                                                      [Literal] '"    VarFramingMatchers: 0\n" '
                                                                                                                        [FirstOf] '"    VarFramingMatchers: 0\n"'
                                                                                                                          [StringLiteral] '"    VarFramingMatchers: 0\n"'
                                                                                                                            [ZeroOrMore] '    VarFramingMatchers: 0\n'
                                                                                                            [Sequence] '+\n                "MemoMismatchesMatchers: 7\n"'
                                                                                                              [FirstOf] '+\n                '
                                                                                                              [MultiplicativeExpression] '"MemoMismatchesMatchers: 7\n"'
                                                                                                                [UnaryExpression] '"MemoMismatchesMatchers: 7\n"'
                                                                                                                  [Sequence] '"MemoMismatchesMatchers: 7\n"'
                                                                                                                    [Primary] '"MemoMismatchesMatchers: 7\n"'
                                                                                                                      [Literal] '"MemoMismatchesMatchers: 7\n"'
                                                                                                                        [FirstOf] '"MemoMismatchesMatchers: 7\n"'
                                                                                                                          [StringLiteral] '"MemoMismatchesMatchers: 7\n"'
                                                                                                                            [ZeroOrMore] 'MemoMismatchesMatchers: 7\n'
                                [BlockStatement] 'ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        '
                                  [LocalVariableDeclarationStatement] 'ParsingResult<Object> parsingResult = RecoveringParseRunner.run(compilationUnit, testSource);\n        '
                                    [Type] 'ParsingResult<Object> '
                                      [FirstOf] 'ParsingResult<Object> '
                                        [ClassType] 'ParsingResult<Object> '
                                          [Identifier] 'ParsingResult'
                                          [Optional] '<Object> '
                                            [TypeArguments] '<Object> '
                                              [TypeArgument] 'Object'
                                                [ReferenceType] 'Object'
                                                  [Sequence] 'Object'
                                                    [ClassType] 'Object'
                                                      [Identifier] 'Object'
                                    [VariableDeclarators] 'parsingResult = RecoveringParseRunner.run(compilationUnit, testSource)'
                                      [VariableDeclarator] 'parsingResult = RecoveringParseRunner.run(compilationUnit, testSource)'
                                        [Identifier] 'parsingResult '
                                        [Optional] '= RecoveringParseRunner.run(compilationUnit, testSource)'
                                          [Sequence] '= RecoveringParseRunner.run(compilationUnit, testSource)'
                                            [VariableInitializer] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                              [Expression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                [ConditionalExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                  [ConditionalOrExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                    [ConditionalAndExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                      [InclusiveOrExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                        [ExclusiveOrExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                          [AndExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                            [EqualityExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                              [RelationalExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                [ShiftExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                  [AdditiveExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                    [MultiplicativeExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                      [UnaryExpression] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                        [Sequence] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                          [Primary] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                            [Sequence] 'RecoveringParseRunner.run(compilationUnit, testSource)'
                                                                              [QualifiedIdentifier] 'RecoveringParseRunner.run'
                                                                                [Identifier] 'RecoveringParseRunner'
                                                                                [ZeroOrMore] '.run'
                                                                                  [Sequence] '.run'
                                                                                    [Identifier] 'run'
                                                                              [Optional] '(compilationUnit, testSource)'
                                                                                [IdentifierSuffix] '(compilationUnit, testSource)'
                                                                                  [Arguments] '(compilationUnit, testSource)'
                                                                                    [Optional] 'compilationUnit, testSource'
                                                                                      [Sequence] 'compilationUnit, testSource'
                                                                                        [Expression] 'compilationUnit'
                                                                                          [ConditionalExpression] 'compilationUnit'
                                                                                            [ConditionalOrExpression] 'compilationUnit'
                                                                                              [ConditionalAndExpression] 'compilationUnit'
                                                                                                [InclusiveOrExpression] 'compilationUnit'
                                                                                                  [ExclusiveOrExpression] 'compilationUnit'
                                                                                                    [AndExpression] 'compilationUnit'
                                                                                                      [EqualityExpression] 'compilationUnit'
                                                                                                        [RelationalExpression] 'compilationUnit'
                                                                                                          [ShiftExpression] 'compilationUnit'
                                                                                                            [AdditiveExpression] 'compilationUnit'
                                                                                                              [MultiplicativeExpression] 'compilationUnit'
                                                                                                                [UnaryExpression] 'compilationUnit'
                                                                                                                  [Sequence] 'compilationUnit'
                                                                                                                    [Primary] 'compilationUnit'
                                                                                                                      [Sequence] 'compilationUnit'
                                                                                                                        [QualifiedIdentifier] 'compilationUnit'
                                                                                                                          [Identifier] 'compilationUnit'
                                                                                        [ZeroOrMore] ', testSource'
                                                                                          [Sequence] ', testSource'
                                                                                            [Expression] 'testSource'
                                                                                              [ConditionalExpression] 'testSource'
                                                                                                [ConditionalOrExpression] 'testSource'
                                                                                                  [ConditionalAndExpression] 'testSource'
                                                                                                    [InclusiveOrExpression] 'testSource'
                                                                                                      [ExclusiveOrExpression] 'testSource'
                                                                                                        [AndExpression] 'testSource'
                                                                                                          [EqualityExpression] 'testSource'
                                                                                                            [RelationalExpression] 'testSource'
                                                                                                              [ShiftExpression] 'testSource'
                                                                                                                [AdditiveExpression] 'testSource'
                                                                                                                  [MultiplicativeExpression] 'testSource'
                                                                                                                    [UnaryExpression] 'testSource'
                                                                                                                      [Sequence] 'testSource'
                                                                                                                        [Primary] 'testSource'
                                                                                                                          [Sequence] 'testSource'
                                                                                                                            [QualifiedIdentifier] 'testSource'
                                                                                                                              [Identifier] 'testSource'
                                [BlockStatement] 'if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        '
                                  [Statement] 'if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        '
                                    [Sequence] 'if (parsingResult.hasErrors()) {\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        '
                                      [ParExpression] '(parsingResult.hasErrors()) '
                                        [Expression] 'parsingResult.hasErrors()'
                                          [ConditionalExpression] 'parsingResult.hasErrors()'
                                            [ConditionalOrExpression] 'parsingResult.hasErrors()'
                                              [ConditionalAndExpression] 'parsingResult.hasErrors()'
                                                [InclusiveOrExpression] 'parsingResult.hasErrors()'
                                                  [ExclusiveOrExpression] 'parsingResult.hasErrors()'
                                                    [AndExpression] 'parsingResult.hasErrors()'
                                                      [EqualityExpression] 'parsingResult.hasErrors()'
                                                        [RelationalExpression] 'parsingResult.hasErrors()'
                                                          [ShiftExpression] 'parsingResult.hasErrors()'
                                                            [AdditiveExpression] 'parsingResult.hasErrors()'
                                                              [MultiplicativeExpression] 'parsingResult.hasErrors()'
                                                                [UnaryExpression] 'parsingResult.hasErrors()'
                                                                  [Sequence] 'parsingResult.hasErrors()'
                                                                    [Primary] 'parsingResult.hasErrors()'
                                                                      [Sequence] 'parsingResult.hasErrors()'
                                                                        [QualifiedIdentifier] 'parsingResult.hasErrors'
                                                                          [Identifier] 'parsingResult'
                                                                          [ZeroOrMore] '.hasErrors'
                                                                            [Sequence] '.hasErrors'
                                                                              [Identifier] 'hasErrors'
                                                                        [Optional] '()'
                                                                          [IdentifierSuffix] '()'
                                                                            [Arguments] '()'
                                      [Statement] '{\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        '
                                        [Block] '{\n            fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        }\n        '
                                          [BlockStatements] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        '
                                            [BlockStatement] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        '
                                              [Statement] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        '
                                                [Sequence] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            );\n        '
                                                  [StatementExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                    [ConditionalExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                      [ConditionalOrExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                        [ConditionalAndExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                          [InclusiveOrExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                            [ExclusiveOrExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                              [AndExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                [EqualityExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                  [RelationalExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                    [ShiftExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                      [AdditiveExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                        [MultiplicativeExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                          [UnaryExpression] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                            [Sequence] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                              [Primary] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                                [Sequence] 'fail("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                                  [QualifiedIdentifier] 'fail'
                                                                                    [Identifier] 'fail'
                                                                                  [Optional] '("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                                    [IdentifierSuffix] '("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                                      [Arguments] '("\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            )'
                                                                                        [Optional] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                          [Sequence] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                            [Expression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                              [ConditionalExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                [ConditionalOrExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                  [ConditionalAndExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                    [InclusiveOrExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                      [ExclusiveOrExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                        [AndExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                          [EqualityExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                            [RelationalExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                              [ShiftExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                [AdditiveExpression] '"\n--- ParseErrors ---\n" +\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                  [MultiplicativeExpression] '"\n--- ParseErrors ---\n" '
                                                                                                                    [UnaryExpression] '"\n--- ParseErrors ---\n" '
                                                                                                                      [Sequence] '"\n--- ParseErrors ---\n" '
                                                                                                                        [Primary] '"\n--- ParseErrors ---\n" '
                                                                                                                          [Literal] '"\n--- ParseErrors ---\n" '
                                                                                                                            [FirstOf] '"\n--- ParseErrors ---\n"'
                                                                                                                              [StringLiteral] '"\n--- ParseErrors ---\n"'
                                                                                                                                [ZeroOrMore] '\n--- ParseErrors ---\n'
                                                                                                                  [ZeroOrMore] '+\n                    StringUtils.join(parsingResult.parseErrors, "---\n") +\n                    "\n--- ParseTree ---\n" +\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                    [Sequence] '+\n                    StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                      [FirstOf] '+\n                    '
                                                                                                                      [MultiplicativeExpression] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                        [UnaryExpression] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                          [Sequence] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                            [Primary] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                              [Sequence] 'StringUtils.join(parsingResult.parseErrors, "---\n") '
                                                                                                                                [QualifiedIdentifier] 'StringUtils.join'
                                                                                                                                  [Identifier] 'StringUtils'
                                                                                                                                  [ZeroOrMore] '.join'
                                                                                                                                    [Sequence] '.join'
                                                                                                                                      [Identifier] 'join'
                                                                                                                                [Optional] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                  [IdentifierSuffix] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                    [Arguments] '(parsingResult.parseErrors, "---\n") '
                                                                                                                                      [Optional] 'parsingResult.parseErrors, "---\n"'
                                                                                                                                        [Sequence] 'parsingResult.parseErrors, "---\n"'
                                                                                                                                          [Expression] 'parsingResult.parseErrors'
                                                                                                                                            [ConditionalExpression] 'parsingResult.parseErrors'
                                                                                                                                              [ConditionalOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                [ConditionalAndExpression] 'parsingResult.parseErrors'
                                                                                                                                                  [InclusiveOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                    [ExclusiveOrExpression] 'parsingResult.parseErrors'
                                                                                                                                                      [AndExpression] 'parsingResult.parseErrors'
                                                                                                                                                        [EqualityExpression] 'parsingResult.parseErrors'
                                                                                                                                                          [RelationalExpression] 'parsingResult.parseErrors'
                                                                                                                                                            [ShiftExpression] 'parsingResult.parseErrors'
                                                                                                                                                              [AdditiveExpression] 'parsingResult.parseErrors'
                                                                                                                                                                [MultiplicativeExpression] 'parsingResult.parseErrors'
                                                                                                                                                                  [UnaryExpression] 'parsingResult.parseErrors'
                                                                                                                                                                    [Sequence] 'parsingResult.parseErrors'
                                                                                                                                                                      [Primary] 'parsingResult.parseErrors'
                                                                                                                                                                        [Sequence] 'parsingResult.parseErrors'
                                                                                                                                                                          [QualifiedIdentifier] 'parsingResult.parseErrors'
                                                                                                                                                                            [Identifier] 'parsingResult'
                                                                                                                                                                            [ZeroOrMore] '.parseErrors'
                                                                                                                                                                              [Sequence] '.parseErrors'
                                                                                                                                                                                [Identifier] 'parseErrors'
                                                                                                                                          [ZeroOrMore] ', "---\n"'
                                                                                                                                            [Sequence] ', "---\n"'
                                                                                                                                              [Expression] '"---\n"'
                                                                                                                                                [ConditionalExpression] '"---\n"'
                                                                                                                                                  [ConditionalOrExpression] '"---\n"'
                                                                                                                                                    [ConditionalAndExpression] '"---\n"'
                                                                                                                                                      [InclusiveOrExpression] '"---\n"'
                                                                                                                                                        [ExclusiveOrExpression] '"---\n"'
                                                                                                                                                          [AndExpression] '"---\n"'
                                                                                                                                                            [EqualityExpression] '"---\n"'
                                                                                                                                                              [RelationalExpression] '"---\n"'
                                                                                                                                                                [ShiftExpression] '"---\n"'
                                                                                                                                                                  [AdditiveExpression] '"---\n"'
                                                                                                                                                                    [MultiplicativeExpression] '"---\n"'
                                                                                                                                                                      [UnaryExpression] '"---\n"'
                                                                                                                                                                        [Sequence] '"---\n"'
                                                                                                                                                                          [Primary] '"---\n"'
                                                                                                                                                                            [Literal] '"---\n"'
                                                                                                                                                                              [FirstOf] '"---\n"'
                                                                                                                                                                                [StringLiteral] '"---\n"'
                                                                                                                                                                                  [ZeroOrMore] '---\n'
                                                                                                                    [Sequence] '+\n                    "\n--- ParseTree ---\n" '
                                                                                                                      [FirstOf] '+\n                    '
                                                                                                                      [MultiplicativeExpression] '"\n--- ParseTree ---\n" '
                                                                                                                        [UnaryExpression] '"\n--- ParseTree ---\n" '
                                                                                                                          [Sequence] '"\n--- ParseTree ---\n" '
                                                                                                                            [Primary] '"\n--- ParseTree ---\n" '
                                                                                                                              [Literal] '"\n--- ParseTree ---\n" '
                                                                                                                                [FirstOf] '"\n--- ParseTree ---\n"'
                                                                                                                                  [StringLiteral] '"\n--- ParseTree ---\n"'
                                                                                                                                    [ZeroOrMore] '\n--- ParseTree ---\n'
                                                                                                                    [Sequence] '+\n                    printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                      [FirstOf] '+\n                    '
                                                                                                                      [MultiplicativeExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                        [UnaryExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                          [Sequence] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                            [Primary] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                              [Sequence] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                                [QualifiedIdentifier] 'printNodeTree'
                                                                                                                                  [Identifier] 'printNodeTree'
                                                                                                                                [Optional] '(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                                  [IdentifierSuffix] '(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                                    [Arguments] '(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())\n            '
                                                                                                                                      [Optional] 'parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                        [Sequence] 'parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                          [Expression] 'parsingResult'
                                                                                                                                            [ConditionalExpression] 'parsingResult'
                                                                                                                                              [ConditionalOrExpression] 'parsingResult'
                                                                                                                                                [ConditionalAndExpression] 'parsingResult'
                                                                                                                                                  [InclusiveOrExpression] 'parsingResult'
                                                                                                                                                    [ExclusiveOrExpression] 'parsingResult'
                                                                                                                                                      [AndExpression] 'parsingResult'
                                                                                                                                                        [EqualityExpression] 'parsingResult'
                                                                                                                                                          [RelationalExpression] 'parsingResult'
                                                                                                                                                            [ShiftExpression] 'parsingResult'
                                                                                                                                                              [AdditiveExpression] 'parsingResult'
                                                                                                                                                                [MultiplicativeExpression] 'parsingResult'
                                                                                                                                                                  [UnaryExpression] 'parsingResult'
                                                                                                                                                                    [Sequence] 'parsingResult'
                                                                                                                                                                      [Primary] 'parsingResult'
                                                                                                                                                                        [Sequence] 'parsingResult'
                                                                                                                                                                          [QualifiedIdentifier] 'parsingResult'
                                                                                                                                                                            [Identifier] 'parsingResult'
                                                                                                                                          [ZeroOrMore] ', Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                            [Sequence] ', Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                              [Expression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                [ConditionalExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                  [ConditionalOrExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                    [ConditionalAndExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                      [InclusiveOrExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                        [ExclusiveOrExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                          [AndExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                            [EqualityExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                              [RelationalExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                [ShiftExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                  [AdditiveExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                    [MultiplicativeExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                      [UnaryExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                        [Sequence] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                          [Primary] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                            [Sequence] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                              [QualifiedIdentifier] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                                [Identifier] 'Filters'
                                                                                                                                                                                [ZeroOrMore] '.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                                  [Sequence] '.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                                    [Identifier] 'SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                            [Sequence] ', Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                              [Expression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                [ConditionalExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                  [ConditionalOrExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                    [ConditionalAndExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                      [InclusiveOrExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                        [ExclusiveOrExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                          [AndExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                            [EqualityExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                              [RelationalExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                                [ShiftExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                                  [AdditiveExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                                    [MultiplicativeExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                                      [UnaryExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                                        [Sequence] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                                          [Primary] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                                            [Sequence] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                                              [QualifiedIdentifier] 'Predicates'
                                                                                                                                                                                [Identifier] 'Predicates'
                                                                                                                                                                              [Optional] '.<Node<Object>>alwaysTrue()'
                                                                                                                                                                                [IdentifierSuffix] '.<Node<Object>>alwaysTrue()'
                                                                                                                                                                                  [Sequence] '.<Node<Object>>alwaysTrue()'
                                                                                                                                                                                    [FirstOf] '<Node<Object>>alwaysTrue()'
                                                                                                                                                                                      [ExplicitGenericInvocation] '<Node<Object>>alwaysTrue()'
                                                                                                                                                                                        [NonWildcardTypeArguments] '<Node<Object>>'
                                                                                                                                                                                          [ReferenceType] 'Node<Object>'
                                                                                                                                                                                            [Sequence] 'Node<Object>'
                                                                                                                                                                                              [ClassType] 'Node<Object>'
                                                                                                                                                                                                [Identifier] 'Node'
                                                                                                                                                                                                [Optional] '<Object>'
                                                                                                                                                                                                  [TypeArguments] '<Object>'
                                                                                                                                                                                                    [TypeArgument] 'Object'
                                                                                                                                                                                                      [ReferenceType] 'Object'
                                                                                                                                                                                                        [Sequence] 'Object'
                                                                                                                                                                                                          [ClassType] 'Object'
                                                                                                                                                                                                            [Identifier] 'Object'
                                                                                                                                                                                        [ExplicitGenericInvocationSuffix] 'alwaysTrue()'
                                                                                                                                                                                          [Sequence] 'alwaysTrue()'
                                                                                                                                                                                            [Identifier] 'alwaysTrue'
                                                                                                                                                                                            [Arguments] '()'
                                [BlockStatement] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    '
                                  [Statement] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    '
                                    [Sequence] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        );\n    '
                                      [StatementExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                        [ConditionalExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                          [ConditionalOrExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                            [ConditionalAndExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                              [InclusiveOrExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                [ExclusiveOrExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                  [AndExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                    [EqualityExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                      [RelationalExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                        [ShiftExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                          [AdditiveExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                            [MultiplicativeExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                              [UnaryExpression] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                                [Sequence] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                                  [Primary] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                                    [Sequence] 'assertEquals(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                                      [QualifiedIdentifier] 'assertEquals'
                                                                        [Identifier] 'assertEquals'
                                                                      [Optional] '(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                                        [IdentifierSuffix] '(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                                          [Arguments] '(\n                printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        )'
                                                                            [Optional] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                              [Sequence] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()),\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                [Expression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                  [ConditionalExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                    [ConditionalOrExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                      [ConditionalAndExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                        [InclusiveOrExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                          [ExclusiveOrExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                            [AndExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                              [EqualityExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                [RelationalExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                  [ShiftExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                    [AdditiveExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                      [MultiplicativeExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                        [UnaryExpression] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                          [Sequence] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                            [Primary] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                              [Sequence] 'printNodeTree(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                                [QualifiedIdentifier] 'printNodeTree'
                                                                                                                  [Identifier] 'printNodeTree'
                                                                                                                [Optional] '(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                                  [IdentifierSuffix] '(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                                    [Arguments] '(parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue())'
                                                                                                                      [Optional] 'parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                        [Sequence] 'parsingResult, Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                          [Expression] 'parsingResult'
                                                                                                                            [ConditionalExpression] 'parsingResult'
                                                                                                                              [ConditionalOrExpression] 'parsingResult'
                                                                                                                                [ConditionalAndExpression] 'parsingResult'
                                                                                                                                  [InclusiveOrExpression] 'parsingResult'
                                                                                                                                    [ExclusiveOrExpression] 'parsingResult'
                                                                                                                                      [AndExpression] 'parsingResult'
                                                                                                                                        [EqualityExpression] 'parsingResult'
                                                                                                                                          [RelationalExpression] 'parsingResult'
                                                                                                                                            [ShiftExpression] 'parsingResult'
                                                                                                                                              [AdditiveExpression] 'parsingResult'
                                                                                                                                                [MultiplicativeExpression] 'parsingResult'
                                                                                                                                                  [UnaryExpression] 'parsingResult'
                                                                                                                                                    [Sequence] 'parsingResult'
                                                                                                                                                      [Primary] 'parsingResult'
                                                                                                                                                        [Sequence] 'parsingResult'
                                                                                                                                                          [QualifiedIdentifier] 'parsingResult'
                                                                                                                                                            [Identifier] 'parsingResult'
                                                                                                                          [ZeroOrMore] ', Filters.SKIP_EMPTY_OPTS_AND_ZOMS, Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                            [Sequence] ', Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                              [Expression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                [ConditionalExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                  [ConditionalOrExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                    [ConditionalAndExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                      [InclusiveOrExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                        [ExclusiveOrExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                          [AndExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                            [EqualityExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                              [RelationalExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                [ShiftExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                  [AdditiveExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                    [MultiplicativeExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                      [UnaryExpression] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                        [Sequence] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                          [Primary] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                            [Sequence] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                              [QualifiedIdentifier] 'Filters.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                [Identifier] 'Filters'
                                                                                                                                                                [ZeroOrMore] '.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                  [Sequence] '.SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                                                                    [Identifier] 'SKIP_EMPTY_OPTS_AND_ZOMS'
                                                                                                                            [Sequence] ', Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                              [Expression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                [ConditionalExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                  [ConditionalOrExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                    [ConditionalAndExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                      [InclusiveOrExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                        [ExclusiveOrExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                          [AndExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                            [EqualityExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                              [RelationalExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                [ShiftExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                  [AdditiveExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                    [MultiplicativeExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                      [UnaryExpression] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                        [Sequence] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                          [Primary] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                            [Sequence] 'Predicates.<Node<Object>>alwaysTrue()'
                                                                                                                                                              [QualifiedIdentifier] 'Predicates'
                                                                                                                                                                [Identifier] 'Predicates'
                                                                                                                                                              [Optional] '.<Node<Object>>alwaysTrue()'
                                                                                                                                                                [IdentifierSuffix] '.<Node<Object>>alwaysTrue()'
                                                                                                                                                                  [Sequence] '.<Node<Object>>alwaysTrue()'
                                                                                                                                                                    [FirstOf] '<Node<Object>>alwaysTrue()'
                                                                                                                                                                      [ExplicitGenericInvocation] '<Node<Object>>alwaysTrue()'
                                                                                                                                                                        [NonWildcardTypeArguments] '<Node<Object>>'
                                                                                                                                                                          [ReferenceType] 'Node<Object>'
                                                                                                                                                                            [Sequence] 'Node<Object>'
                                                                                                                                                                              [ClassType] 'Node<Object>'
                                                                                                                                                                                [Identifier] 'Node'
                                                                                                                                                                                [Optional] '<Object>'
                                                                                                                                                                                  [TypeArguments] '<Object>'
                                                                                                                                                                                    [TypeArgument] 'Object'
                                                                                                                                                                                      [ReferenceType] 'Object'
                                                                                                                                                                                        [Sequence] 'Object'
                                                                                                                                                                                          [ClassType] 'Object'
                                                                                                                                                                                            [Identifier] 'Object'
                                                                                                                                                                        [ExplicitGenericInvocationSuffix] 'alwaysTrue()'
                                                                                                                                                                          [Sequence] 'alwaysTrue()'
                                                                                                                                                                            [Identifier] 'alwaysTrue'
                                                                                                                                                                            [Arguments] '()'
                                                                                [ZeroOrMore] ',\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                  [Sequence] ',\n                FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                    [Expression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                      [ConditionalExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                        [ConditionalOrExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                          [ConditionalAndExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                            [InclusiveOrExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                              [ExclusiveOrExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                [AndExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                  [EqualityExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                    [RelationalExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                      [ShiftExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                        [AdditiveExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                          [MultiplicativeExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                            [UnaryExpression] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                              [Sequence] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                                [Primary] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                                  [Sequence] 'FileUtils.readAllTextFromResource("SimpleJavaTestParseTree.test")\n        '
                                                                                                                    [QualifiedIdentifier] 'FileUtils.readAllTextFromResource'
                                                                                                                      [Identifier] 'FileUtils'
                                                                                                                      [ZeroOrMore] '.readAllTextFromResource'
                                                                                                                        [Sequence] '.readAllTextFromResource'
                                                                                                                          [Identifier] 'readAllTextFromResource'
                                                                                                                    [Optional] '("SimpleJavaTestParseTree.test")\n        '
                                                                                                                      [IdentifierSuffix] '("SimpleJavaTestParseTree.test")\n        '
                                                                                                                        [Arguments] '("SimpleJavaTestParseTree.test")\n        '
                                                                                                                          [Optional] '"SimpleJavaTestParseTree.test"'
                                                                                                                            [Sequence] '"SimpleJavaTestParseTree.test"'
                                                                                                                              [Expression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                [ConditionalExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                  [ConditionalOrExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                    [ConditionalAndExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                      [InclusiveOrExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                        [ExclusiveOrExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                          [AndExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                            [EqualityExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                              [RelationalExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                [ShiftExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                  [AdditiveExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                    [MultiplicativeExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                      [UnaryExpression] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                        [Sequence] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                          [Primary] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                            [Literal] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                              [FirstOf] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                                [StringLiteral] '"SimpleJavaTestParseTree.test"'
                                                                                                                                                                  [ZeroOrMore] 'SimpleJavaTestParseTree.test'
  [EOI]
